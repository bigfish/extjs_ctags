The Element object
Cached url to use for refreshes. Overwritten every time update() is called unless "discardUrl" param is set to true.
Blank page URL to use with SSL file uploads (defaults to {@link Ext.Updater.defaults#sslBlankUrl}).
Whether to append unique parameter on get request to disable caching (defaults to {@link Ext.Updater.defaults#disableCaching}).
Text for loading indicator (defaults to {@link Ext.Updater.defaults#indicatorText}).
Whether to show indicatorText when loading (defaults to {@link Ext.Updater.defaults#showLoadIndicator}).
Timeout for requests or form posts in seconds (defaults to {@link Ext.Updater.defaults#timeout}).
True to process scripts in the output (defaults to {@link Ext.Updater.defaults#loadScripts}).
Transaction object of the current executing transaction, or null if there is no active transaction.
Delegate for refresh() prebound to "this", use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments
Delegate for update() prebound to "this", use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments
Delegate for formUpdate() prebound to "this", use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments
The renderer for this Updater (defaults to {@link Ext.Updater.BasicRenderer}).
Sets the content renderer for this Updater. See {@link Ext.Updater.BasicRenderer#render} for more details.
Returns the current content renderer for this Updater. See {@link Ext.Updater.BasicRenderer#render} for more details.
This is an overrideable method which returns a reference to a default
Sets the default URL used for updates.
Get the Element this Updater is bound to
Performs an <b>asynchronous</b> request, updating this element with the response.
<p>Performs an asynchronous form post, updating this element with the response. If the form has the attribute
Set this element to auto refresh.  Can be canceled by calling {@link #stopAutoRefresh}.
Stop auto refresh on this element.
Returns true if the Updater is currently set to auto refresh its content (see {@link #startAutoRefresh}), otherwise false.
Display the element's "loading" state. By default, the element is updated with {@link #indicatorText}. This
Aborts the currently executing transaction, if any.
Returns true if an update is in progress, otherwise false.
Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately
Timeout for requests or form posts in seconds (defaults to 30 seconds).
True to append a unique parameter to GET requests to disable caching (defaults to false).
Whether or not to show {@link #indicatorText} during loading (defaults to true).
Text for loading indicator (defaults to '&lt;div class="loading-indicator"&gt;Loading...&lt;/div&gt;').
True to process scripts by default (defaults to false).
Blank page URL to use with SSL file uploads (defaults to {@link Ext#SSL_SECURE_URL} if set, or "javascript:false").
Static convenience method. <b>This method is deprecated in favor of el.load({url:'foo.php', ...})</b>.
This method is called when an Ajax response is received, and an Element needs updating.
Creates a stylesheet from a text blob of rules.
Removes a style or link tag by id
Dynamically swaps an existing stylesheet reference for a new one
Refresh the rule cache if you have dynamically added stylesheets
Gets all css rules for the document
Gets an an individual CSS rule by selector(s)
Updates a rule property
Measures the size of the specified text
Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
Returns the width in pixels of the passed text, or the width of the text in this Element.
Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
Checks a reference and converts it to empty string if it is undefined
Checks a reference and converts it to the default value if it's empty
Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.
Convert certain characters (&, <, >, and ') from their HTML character equivalents.
Trims any whitespace from either side of a string
Returns a substring from within an original string
Converts a string to all lower case letters
Converts a string to all upper case letters
Converts the first character only of a string to upper case
Format a number as US currency
Parse a value into a formatted date using the specified format pattern.
Returns a date rendering function that can be reused to apply a date format multiple times efficiently
Strips all HTML tags
Strips all script tags
Simple format for a file size (xxx bytes, xxx KB, xxx MB)
It does simple math for use in a template, for example:<pre><code>
Rounds the passed number to the required decimal precision.
Formats the number according to the format string.
Returns a number rendering function that can be reused to apply a number format multiple times efficiently
Selectively do a plural form of a word based on a numeric value. For example, in a template,
Converts newline characters to the HTML tag &lt;br/>
True to stop the event from bubbling and prevent the default browser action if the
Add a new binding to this KeyMap. The following config object properties are supported:
Shorthand for adding a single key listener
Returns true if this KeyMap is enabled
Enables this KeyMap
Disable this KeyMap
Convenience function for setting disabled/enabled by boolean.
Enables the repeater and allows events to fire.
Disables the repeater and stops events from firing.
Convenience function for setting disabled/enabled by boolean.
Destroy this KeyNav (this is the same as calling disable).
Enable this KeyNav
Disable this KeyNav
Convenience function for setting disabled/enabled by boolean.
Adds an item to the collection. Fires the {@link #add} event when complete.
MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
Replaces an item in the collection. Fires the {@link #replace} event when complete.
Adds all elements of an Array or an Object to the collection.
Executes the specified function once for every item in the collection, passing the following arguments:
Executes the specified function once for every key in the collection, passing each
Returns the first item in the collection which elicits a true return value from the
Inserts an item at the specified index in the collection. Fires the {@link #add} event when complete.
Remove an item from the collection.
Remove an item from a specified index in the collection. Fires the {@link #remove} event when complete.
Removed an item associated with the passed key fom the collection.
Returns the number of items in the collection.
Returns index within the collection of the passed Object.
Returns index within the collection of the passed key.
Returns the item associated with the passed key OR index.
Returns the item at the specified index.
Returns the item associated with the passed key.
Returns true if the collection contains the passed Object as an item.
Returns true if the collection contains the passed Object as a key.
Removes all items from the collection.  Fires the {@link #clear} event when complete.
Returns the first item in the collection.
Returns the last item in the collection.
Sorts this collection by <b>item</b> value with the passed comparison function.
Reorders each of the items based on a mapping from old index to new index. Internally this
Sorts this collection by <b>key</b>s.
Returns a range of items in this collection
Filter the <i>objects</i> in this collection by a specific property.
Filter by a function. Returns a <i>new</i> collection that has been filtered.
Finds the index of the first matching object in this collection by a specific property/value.
Find the index of the first matching object in this collection by a function.
Returns a regular expression based on the given value and matching options. This is used internally for finding and filtering,
Creates a shallow copy of this collection
This method calls {@link #item item()}.
Global flag which determines if strict date parsing should be used.
<p>An object hash in which each property is a date parsing function. The property name is the
<p>An object hash in which each property is a date formatting function. The property name is the
Date interval constant
Date interval constant
Date interval constant
Date interval constant
Date interval constant
Date interval constant
<p>An object hash containing default date values used during date parsing.</p>
An array of textual day names.
An array of textual month names.
An object hash of zero-based javascript month numbers (with short month names as keys. note: keys are case-sensitive).
Get the short month name for the given month number.
Get the short day name for the given day number.
Get the zero-based javascript month number for the given short/full month name.
The base format-code to formatting-function hashmap used by the {@link #format} method.
Checks if the passed Date parameters will cause a javascript Date "rollover".
Parses the passed string using the specified date format.
Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
Get the offset from GMT of the current date (equivalent to the format specifier 'O').
Get the numeric day number of the year, adjusted for leap year.
Get the numeric ISO-8601 week number of the year.
Checks if the current date falls within a leap year.
Get the first day of the current month, adjusted for leap year.  The returned value
Get the last day of the current month, adjusted for leap year.  The returned value
Get the date of the first day of the month in which this date resides.
Get the date of the last day of the month in which this date resides.
Get the number of days in the current month, adjusted for leap year.
Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').
Creates and returns a new Date instance with the exact same date value as the called instance.
Checks if the current date is affected by Daylight Saving Time (DST).
Attempts to clear all time information from this Date by setting the time to midnight of the same day,
Provides a convenient method for performing basic date arithmetic. This method
Checks if this date falls on or between the given start and end dates.
Formats a date given the supplied format string.
Returns an HTML fragment of this template with the specified values applied.
Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.
Alias for {@link #applyTemplate}
Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
Relays selected events from the specified Observable as if the events were fired by <tt><b>this</b></tt>.
<p>Enables events fired by this Observable to bubble up an owner hierarchy by calling
Starts capture on the specified Observable. All events will be passed
Sets observability on the passed class constructor.<p>
The id of the hidden field required for storing the current history token.
The id of the iframe required by IE to manage the history stack.
Initialize the global History instance.
Add a new token to the history stack. This can be any arbitrary value, although it would
Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).
Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).
Retrieves the currently-active history token.
Create a cookie with the specified name and value. Additional settings
Retrieves cookies that are accessible by the current page. If a cookie
Removes a cookie with the provided name from the browser
More flexible version of {@link #setStyle} for setting style properties.
Returns an object with properties matching the styles requested.
<p>Wraps the specified element with a special 9 element markup/CSS block that renders by default as
Set the size of this Element. If animation is true, both width and height will be animated concurrently.
Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
Returns the sum width of the padding and borders for the passed "sides". See getBorderWidth()
Sets up event handlers to add and remove a css class when the mouse is over this element
Sets up event handlers to add and remove a css class when this element has the focus
Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)
<p>Returns the dimensions of the element available to lay content out in.<p>
<p>Returns the dimensions of the element available to lay content out in.<p>
Returns the size of the element.
Forces the browser to repaint this element
Disables text selection for this element (normalized across browsers)
Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
Scrolls this element into view within the passed container.
Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
Measures the element's content height and updates height to match. Note: this function uses setTimeout so
Convenience method for constructing a KeyMap
Creates a KeyMap for this element
Framework-wide error-handler.  Developers can override this method to provide
getName
getMessage
toJson
Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
Stops the specified event(s) from bubbling and optionally prevents the default action
Create an event handler on this element such that when the event fires and is handled by this element,
Removes worthless text nodes
Direct access to the Updater {@link Ext.Updater#update} method. The method takes the same object
Gets this element's {@link Ext.Updater Updater}
Update the innerHTML of this element, optionally searching for and processing scripts
Creates a proxy element of this element
Checks whether the element is currently visible using both visibility and display properties.
Returns true if display is not "none"
Convenience method for setVisibilityMode(Element.DISPLAY)
Puts a mask over this element to disable user interaction. Requires core.css.
Removes a previously applied mask.
Returns true if this element is masked
Creates an iframe shim for this element to keep selects and other windowed objects from
Adds a listener to be notified when the browser window is resized and provides resize event buffering (100 milliseconds),
Adds a listener to be notified when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.
Removes the passed window resize listener.
The frequency, in milliseconds, to check for text resize events (defaults to 50)
Url used for onDocumentReady with using SSL (defaults to Ext.SSL_SECURE_URL)
BACKSPACE: 8,
TAB: 9,
NUM_CENTER: 12,
ENTER: 13,
RETURN: 13,
SHIFT: 16,
CTRL: 17,
ALT: 18,
PAUSE: 19,
CAPS_LOCK: 20,
ESC: 27,
SPACE: 32,
PAGE_UP: 33,
PAGE_DOWN: 34,
END: 35,
HOME: 36,
LEFT: 37,
UP: 38,
RIGHT: 39,
DOWN: 40,
PRINT_SCREEN: 44,
INSERT: 45,
DELETE: 46,
ZERO: 48,
ONE: 49,
TWO: 50,
THREE: 51,
FOUR: 52,
FIVE: 53,
SIX: 54,
SEVEN: 55,
EIGHT: 56,
NINE: 57,
A: 65,
B: 66,
C: 67,
D: 68,
E: 69,
F: 70,
G: 71,
H: 72,
I: 73,
J: 74,
K: 75,
L: 76,
M: 77,
N: 78,
O: 79,
P: 80,
Q: 81,
R: 82,
S: 83,
T: 84,
U: 85,
V: 86,
W: 87,
X: 88,
Y: 89,
Z: 90,
CONTEXT_MENU: 93,
NUM_ZERO: 96,
NUM_ONE: 97,
NUM_TWO: 98,
NUM_THREE: 99,
NUM_FOUR: 100,
NUM_FIVE: 101,
NUM_SIX: 102,
NUM_SEVEN: 103,
NUM_EIGHT: 104,
NUM_NINE: 105,
NUM_MULTIPLY: 106,
NUM_PLUS: 107,
NUM_MINUS: 109,
NUM_PERIOD: 110,
NUM_DIVISION: 111,
F1: 112,
F2: 113,
F3: 114,
F4: 115,
F5: 116,
F6: 117,
F7: 118,
F8: 119,
F9: 120,
F10: 121,
F11: 122,
F12: 123,
isNavKeyPress : function(){
Returns true if the control, meta, shift or alt key was pressed during this event.
function createDom(o, parentNode){
Creates a new Ext.Template from the DOM object spec.
useDom : false,
Creates new DOM element(s) and inserts them before el.
Creates new DOM element(s) and inserts them after el.
Creates new DOM element(s) and inserts them as the first child of el.
Creates new DOM element(s) and appends them to el.
Creates new DOM element(s) without inserting them to the document.
Initializes a {@link Ext.dd.DD} drag drop object for this element.
Initializes a {@link Ext.dd.DDProxy} object for this element.
Initializes a {@link Ext.dd.DDTarget} object for this element.
Adds elements to this composite.
Returns the Element object at the specified index
Iterates each <code>element</code> in this <code>composite</code>
Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
Namespace alloted for extensions to the framework.
A reusable empty function
URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images.
Returns the current HTML document object as an {@link Ext.Element}.
Utility method for validating that a value is numeric, returning the specified default value if it is not.
<p>Utility method for returning a default value if the passed value is empty.</p>
Escapes the passed string for use in a regular expression
Applies event listeners to elements by selectors when the document is ready.
Utility method for getting the width of the browser scrollbar. This can differ depending on
Copies a set of named properties fom the source object to the destination object.
Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
Attempts to destroy and then remove a set of named properties of the passed object.
Creates a copy of the passed Array with falsy values removed.
Creates a copy of the passed Array, filtered to contain only unique values.
Recursively flattens into 1-d Array. Injects Arrays inline.
Returns the minimum value in the Array.
Returns the maximum value in the Array
Calculates the mean of the Array
Calculates the sum of the Array
Partitions the set into two sets: a true set and a false set.
Invokes a method on each item in an Array.
Plucks the value of a property from each item in the Array
<p>Zips N sets together.</p>
This is shorthand reference to {@link Ext.ComponentMgr#get}.
By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,
Returns the type of object that is passed in. If the object passed in is null or undefined it
Create a combined function call sequence of the original function + the passed function.
Escapes the passed string for ' and \
Pads the left side of a string with a specified character.  This is especially useful
Utility function that allows you to easily switch a string between two alternating values.  The passed value
Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
Returns the number of milliseconds between this date and date
Checks whether or not the current number is within a desired range.  If the number is already within the
See <code>{@link #disableFormats}</code>.
The regular expression used to match template variables
Returns an HTML fragment of this template with the specified values applied.
Compiles the template into an internal function, eliminating the RegEx overhead.
Returns the first Element
Returns the last Element
Returns true if this composite contains the passed element
Removes the specified element(s).
Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.
Return an object defining the area of this Element which can be passed to {@link #setBox} to
Move this element relative to its current position.
Quick set left and top adding default units
Returns the region of the given element.
Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.
Gets the x,y coordinates specified by the anchor position on the element.
Anchors an element to another element and realigns it when the window is resized.
Remove any anchor to this element. See {@link #anchorTo}.
Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the
Aligns this element with another element relative to the specified anchor points. If the other element is the
Calculates the x, y to center this element on the screen
Centers the Element in either the viewport, or another Element.
Each event type implements a getData() method. The default event types are:
Four types of possible exceptions which can occur:
Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods.
Retrieve a {@link Ext.direct.Provider provider} by the
Connect to the server-side and begin the polling process. To handle each
Disconnect from the server-side and stop the polling process. The disconnect
Returns whether or not the server-side is currently connected.
Abstract methods for subclasses to implement.
Abstract methods for subclasses to implement.
List compiled by mystix on the extjs.com forums.
List compiled by mystix on the extjs.com forums.
Hebrew Translations
List compiled by mystix on the extjs.com forums.
Greek (Old Version) Translations by Vagelis
List compiled by mystix on the extjs.com forums.
Portuguese/Brazil Translation by Weber Souza
Polish Translations
List compiled by KillerNay on the extjs.com forums.

Finnish Translations
Bulgarian Translation
List compiled by mystix on the extjs.com forums.
Vietnamese translation
Latvian Translations

Lithuanian Translations (UTF-8)
Greek translation
Swedish translation (utf8-encoding)
Korean Translations By nicetip
Slovenian translation by Matjaž (UTF-8 encoding)
Catalonian Translation by halkon_polako 6-12-2007
Pedoman translasi:
Romanian translations for ExtJS 2.1
Czech Translations
Configures the default state provider for your application
Returns the current value for a key
Sets the value for a key
Clears a value from the state
Gets the currently configured state provider
Returns the current value for a key
Clears a value from the state
Sets the value for a key
Decodes a string previously encoded with {@link #encodeValue}.
Encodes a value including type information.  Decode with {@link #decodeValue}.
Cancels any pending timeout and queues a new one
Cancel the last queued timeout
Starts a new task.
Stops an existing running task.
Stops all tasks that are currently running.
<p>Fires the specified event with the passed parameters (minus the event name).</p>
Appends an event handler to this object.
Removes an event handler.
Removes all listeners for this object
Adds the specified events to the list of events which this Observable may fire.
Checks to see if this object has any listeners for a specified event
Suspend the firing of all events. (see {@link #resumeEvents})
Resume firing events. (see {@link #suspendEvents})
Appends an event handler to this object (shorthand for {@link #addListener}.)
Removes an event handler (shorthand for {@link #removeListener}.)
Removes <b>all</b> added captures from the Observable.
<p>Encodes a Date. This returns the actual string which is inserted into the JSON string as the literal expression.
Encodes an Object, Array or other value
Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError unless the safe option is set.
Shorthand for {@link Ext.util.JSON#encode}
Shorthand for {@link Ext.util.JSON#decode}
Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.
Removes one or more CSS classes from the element.
Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
Checks if the specified CSS class exists on this element's DOM node.
Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.
Normalizes currentStyle and computedStyle.
Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
Wrapper for setting style properties, also takes single object parameter of multiple styles.
Set the opacity of the element
Clears any opacity settings from this element. Required in some cases for IE.
Returns the offset height of the element
Returns the offset width of the element
Set the width of this Element.
Set the height of this Element.
Gets the width of the border(s) for the specified side(s)
Gets the width of the padding(s) for the specified side(s)
Store the current overflow setting and clip overflow on the element - use <tt>{@link #unclip}</tt> to remove
Return clipping (overflow) to original clipping before <tt>{@link #clip}</tt> was called
Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.
Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Sets the element's left position directly using CSS style (instead of {@link #setX}).
Sets the element's top position directly using CSS style (instead of {@link #setY}).
Sets the element's CSS right style.
Sets the element's CSS bottom style.
Sets the position of the element in page coordinates, regardless of how the element is positioned.
Sets the position of the element in page coordinates, regardless of how the element is positioned.
Sets the position of the element in page coordinates, regardless of how the element is positioned.
Gets the left X coordinate
Gets the right X coordinate of the element (element X position + element width)
Gets the top Y coordinate
Gets the bottom Y coordinate of the element (element Y position + element height)
Initializes positioning on this element. If a desired position is not passed, it will make the
Clear positioning back to the default when the document was loaded
Gets an object with all CSS positioning properties. Useful along with setPostioning to get
Set positioning with an object returned by getPositioning().
Translates the passed page coordinates into left/top css values for this element
<p>The Array of DOM elements which this CompositeElement encapsulates. Read-only.</p>
Returns the number of elements in this Composite.
Adds elements to this Composite object.
Returns a flyweight Element of the dom element object at the specified index
<p>Calls the passed function for each element in this composite.</p>
Clears this Composite and adds the elements passed.
Filters this composite to only elements that match the passed selector.
Find the index of the passed element within the composite collection.
Replaces the specified element with the passed element.
Removes all elements.
Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
Appends an event handler to an element.  The shorthand version {@link #on} is equivalent.  Typically you will
Removes an event handler from an element.  The shorthand version {@link #un} is equivalent.  Typically
Removes all event handers from an element.  Typically you will use {@link Ext.Element#removeAllListeners}
Adds a listener to be notified when the document is ready (before onload and before images are loaded). Can be
Forces a document ready state transition for the framework.  Used when Ext is loaded
Appends an event handler to an element.  Shorthand for {@link #addListener}.
Removes an event handler from an element.  Shorthand for {@link #removeListener}.
Adds a listener to be notified when the document is ready (before onload and before images are loaded). Shorthand of {@link Ext.EventManager#onDocumentReady}.
setEvent : function(e){
Stop the event (preventDefault and stopPropagation)
Prevents the browsers default handling of the event.
Cancels bubbling of the event.
Gets the character code for the event.
Returns a normalized keyCode for the event.
Gets the x coordinate of the event.
Gets the y coordinate of the event.
Gets the page coordinates of the event.
Gets the target for the event.
Gets the related target.
Normalizes mouse wheel delta across browsers
Returns true if the target of this event is a child of el.  Unless the allowEl parameter is set, it will return false if if the target is el.
Returns true if this element is scrollable.
Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
Returns the current scroll position of the element.
Visibility mode constant for use with {@link #setVisibilityMode}. Use visibility to hide element
Visibility mode constant for use with {@link #setVisibilityMode}. Use display to hide element
The element's default display mode  (defaults to "")
Sets the element's visibility mode. When setVisible() is called it
Perform custom animation on this element.
Checks whether the element is currently visible using both visibility and display properties.
Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
Toggles the element's visibility or display, depending on visibility mode.
Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.
Hide this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
Show this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
Selects child nodes based on the passed CSS selector (the selector should not contain an id).
Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
Gets the parent node for this element, optionally chaining up trying to match a selector
Gets the next sibling, skipping text nodes
Gets the previous sibling, skipping text nodes
Gets the first child, skipping text nodes
Gets the last child, skipping text nodes
me.html = html;
See <code>{@link #re}</code>.
Returns an HTML fragment of this template with the specified <code>values</code> applied.
Sets the HTML used as the template and optionally compiles it.
Compiles the template into an internal function, eliminating the RegEx overhead.
Applies the supplied values to the template and inserts the new node(s) as the first child of el.
Applies the supplied values to the template and inserts the new node(s) before el.
Applies the supplied values to the template and inserts the new node(s) after el.
Applies the supplied <code>values</code> to the template and appends
Applies the supplied values to the template and overwrites the content of el with the new node(s).
Alias for {@link #applyTemplate}
Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
The DOM element
The DOM element ID
Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
The default unit to append to CSS values where a unit isn't provided (defaults to px).
Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)
Tries to focus the element. Any exceptions are caught and ignored.
Tries to blur the element. Any exceptions are caught and ignored.
Returns the value of the "value" attribute
Appends an event handler to this element.  The shorthand version {@link #on} is equivalent.
Removes an event handler from this element.  The shorthand version {@link #un} is equivalent.
Removes all previous added listeners from this element
Recursively removes all previous added listeners from this element and its children
<p>Updates the <a href="http://developer.mozilla.org/en/DOM/element.innerHTML">innerHTML</a> of this Element
Tests various css rules/browsers to determine if this element uses a border box
<p>Removes this element's dom reference.  Note that event and cache removal is handled at {@link Ext#removeNode}</p>
Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
Returns true if this element is an ancestor of the passed element
Returns the value of a namespaced attribute from the element's underlying DOM node.
Returns the value of an attribute from the element's underlying DOM node.
Update the innerHTML of this element
Appends an event handler (shorthand for {@link #addListener}).
Removes an event handler from this element (see {@link #removeListener} for additional notes).
true to automatically adjust width and height settings for box-model issues (default to true)
Retrieves Ext.Element objects.
<p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
Retrieves Ext.Element objects.
<p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
Loads a given set of .js files. Calls the callback function when all files have been loaded
Loads a particular file from the fileList by index. This is used when preserving order
Callback function which is called after each file has been loaded. This calls the callback
Compiles a selector/xpath query into a reusable function. The returned function
Selects a group of elements.
Selects a single element.
Selects the value of a node, optionally replacing null with the defaultValue.
Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified.
Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)
Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)
Collection of matching regular expressions and code snippets.
Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.
<p>Object hash of "pseudo class" filter functions which are used when filtering selections. Each function is passed
Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Ext.DomQuery#select}
Slides the element into view.  An anchor point can be optionally passed to set the point of
Slides the element out of view.  An anchor point can be optionally passed to set the end point
Fades the element out while slowly expanding it in all directions.  When the effect is completed, the 
Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
Highlights the Element by setting a color (applies to the background-color by default, but can be
Shows a ripple of exploding, attenuating borders to draw attention to an Element.
Creates a pause before any subsequent queued effects begin.  If there are
Fade an element in (from transparent to opaque).  The ending opacity can be specified
Fade an element out (from opaque to transparent).  The ending opacity can be specified
Animates the transition of an element's dimensions from a starting height/width
Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
Slides the element while fading it out of view.  An anchor point can be optionally passed to set the 
Ensures that all effects queued after syncFx is called on the element are
Ensures that all effects queued after sequenceFx is called on the element are
Returns true if the element has any effects actively running or queued, else returns false.
Stops any running effects and clears the element's internal effects queue if it contains
Returns true if the element is currently blocking so that no other effect can be queued
Returns the markup for the passed Element(s) config.
Applies a style specification to an element.
Inserts an HTML fragment into the DOM.
Creates new DOM element(s) and inserts them before el.
Creates new DOM element(s) and inserts them after el.
Creates new DOM element(s) and inserts them as the first child of el.
Creates new DOM element(s) and appends them to el.
Creates new DOM element(s) and overwrites the contents of el with them.
Appends the passed element(s) to this element
Appends this element to the passed element
Inserts this element before the passed element in the DOM
Inserts this element after the passed element in the DOM
Inserts (or creates) an element (or DomHelper config) as the first child of this element
Replaces the passed element with this element
Replaces this element with the passed element
Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
Creates and wraps this element with another element
Inserts an html fragment into this element
The version of the framework
Copies all the properties of config to obj.
URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent
True if the browser is in strict (standards-compliant) mode, as opposed to quirks mode
True if the page is running over SSL
True when the document is fully initialized and ready for action
True if the {@link Ext.Fx} Class is available
True to automatically uncache orphaned Ext.Elements periodically (defaults to true)
True to automatically purge event listeners during garbageCollection (defaults to false).
EXPERIMENTAL - True to cascade listener removal to child elements when an element is removed.
Indicates whether to use native browser parsing for JSON methods.
Copies all the properties of config to obj if they don't already exist.
Generates unique ids. If the element already has an id, it is unchanged
<p>Extends one class to create a subclass and optionally overrides members with the passed literal. This method
Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
Creates namespaces to be used for scoping variables and classes so that they are not global.
Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return "foo=1&bar=2".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.
Takes an encoded URL and and converts it to an object. Example: <pre><code>
Appends content to the query string of a URL, handling logic for whether to place
Converts any iterable (numeric indices and a length property) into a true array
Iterates an array calling the supplied function.
Iterates either the elements in an array, or each of the properties in an object.
Return the dom node for the passed String (id), dom node, or Ext.Element.
Returns the current document body as an {@link Ext.Element}.
Removes a DOM node from the document.
<p>Removes this element from the document, removes all DOM event listeners, and deletes the cache reference.
<p>Returns true if the passed value is empty.</p>
Returns true if the passed value is a JavaScript array, otherwise false.
Returns true if the passed object is a JavaScript date object, otherwise false.
Returns true if the passed value is a JavaScript Object, otherwise false.
Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
Returns true if the passed value is a JavaScript Function, otherwise false.
Returns true if the passed value is a number. Returns false for non-finite numbers.
Returns true if the passed value is a string.
Returns true if the passed value is a boolean.
Returns true if the passed value is an HTMLElement
Returns true if the passed value is not undefined.
True if the detected browser is Opera.
True if the detected browser uses WebKit.
True if the detected browser is Chrome.
True if the detected browser is Safari.
True if the detected browser is Safari 3.x.
True if the detected browser is Safari 4.x.
True if the detected browser is Safari 2.x.
True if the detected browser is Internet Explorer.
True if the detected browser is Internet Explorer 6.x.
True if the detected browser is Internet Explorer 7.x.
True if the detected browser is Internet Explorer 8.x.
True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox).
True if the detected browser uses a pre-Gecko 1.9 layout engine (e.g. Firefox 2.x).
True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x).
True if the detected browser is Internet Explorer running in non-strict mode.
True if the detected platform is Linux.
True if the detected platform is Windows.
True if the detected platform is Mac OS.
True if the detected platform is Adobe Air.
Creates namespaces to be used for scoping variables and classes so that they are not global.
Creates an interceptor function. The passed function is called before the original one. If it returns false,
Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
Creates a delegate (callback) that sets the scope to obj.
Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
Checks whether or not the specified object exists in the array.
Removes the specified object from the array.  If the object is not found nothing happens.
<p>Sends an HTTP request to a remote server.</p>
Determine whether this object has a request outstanding.
Aborts any outstanding request.
Serialize the passed form into a url encoded string
MemoryProxy implementation of DataProxy#doRequest
DirectProxy implementation of {@link Ext.data.DataProxy#doRequest}
Callback for read actions
Callback for write actions
Registers one or more Stores with the StoreMgr. You do not normally need to register stores
Unregisters one or more Stores with the StoreMgr
Gets a registered Store by id
Defined actions corresponding to remote actions:
Defined {CRUD action}:{HTTP method} pairs to associate HTTP methods with the
Returns true if supplied action-name is a valid API action defined in <code>{@link #actions}</code> constants
Returns the actual CRUD action KEY "create", "read", "update" or "destroy" from the supplied action-name.  This method is used internally and shouldn't generally
Returns true if the supplied API is valid; that is, check that all keys match defined actions
Returns true if the supplied verb upon the supplied proxy points to a unique url in that none of the other api-actions
This method is used internally by <tt>{@link Ext.data.DataProxy DataProxy}</tt> and should not generally need to be used directly.
Prepares a supplied Proxy to be RESTful.  Sets the HTTP method for each api-action to be one of
Ext.data.Response
Generate a constructor for a specific Record layout.
Generates a sequential id. This method is typically called when a record is {@link #create}d
<p><b>This property is stored in the Record definition's <u>prototype</u></b></p>
An object hash representing the data for this Record. Every field name in the Record definition
The unique ID of the Record {@link #Record as specified at construction time}.
<p><b>Only present if this Record was created by an {@link Ext.data.XmlReader XmlReader}</b>.</p>
<p><b>Only present if this Record was created by an {@link Ext.data.ArrayReader ArrayReader} or a {@link Ext.data.JsonReader JsonReader}</b>.</p>
Readonly flag - true if this Record has been modified.
This object contains a key and value storing the original values of all modified
<tt>true</tt> when the record does not yet exist in a server-side database (see
The {@link Ext.data.Store} to which this Record belongs.
Set the {@link Ext.data.Field#name named field} to the specified value.  For example:
Get the value of the {@link Ext.data.Field#name named field}.
Begin an edit. While in edit mode, no events (e.g.. the <code>update</code> event)
Cancels all changes made in the current edit operation.
End an edit. If any data was modified, the containing store is notified
Usually called by the {@link Ext.data.Store} which owns the Record.
Usually called by the {@link Ext.data.Store} which owns the Record.
Gets a hash of only the fields that have been modified since this Record was created or commited.
Creates a copy (clone) of this Record.
Returns <tt>true</tt> if the passed field name has been <code>{@link #modified}</code>
By default returns <tt>false</tt> if any {@link Ext.data.Field field} within the
<p>Marks this <b>Record</b> as <code>{@link #dirty}</code>.  This method
Default sort that does nothing
The regular expression used to strip tags
Strips all HTML tags to sort on text only
Strips all HTML tags to sort on text only - Case insensitive
Case insensitive string
Date sorting
Float sorting
Integer sorting
Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}
See the <code>{@link #baseParams corresponding configuration option}</code>
The {@link Ext.data.Record Record} constructor as supplied to (or created by) the
A {@link Ext.util.MixedCollection MixedCollection} containing the defined {@link Ext.data.Field Field}s
builds a DataWriter instance when Store constructor is provided with a writer config-object instead of an instace.
Destroys the store.
Add Records to the Store and fires the {@link #add} event.  To add Records
(Local sort only) Inserts the passed Record into the Store at the index where it
Remove Records from the Store and fires the {@link #remove} event.
Remove a Record from the Store at the specified index. Fires the {@link #remove} event.
Remove all Records from the Store and fires the {@link #clear} event.
Inserts Records into the Store at the given index and fires the {@link #add} event.
Get the index within the cache of the passed Record.
Get the index within the cache of the Record with the passed id.
Get the Record with the specified id.
Get the Record at the specified index.
Returns a range of Records between specified indices.
<p>Loads the Record cache from the configured <tt>{@link #proxy}</tt> using the configured <tt>{@link #reader}</tt>.</p>
updateRecord  Should not be used directly.  This method will be called automatically if a Writer is set.
Should not be used directly.  Store#add will call this automatically if a Writer is set
Destroys a Record.  Should not be used directly.  It's called by Store#remove if a Writer is set.
This method should generally not be used directly.  This method is called internally
Saves all pending changes to the store.  If the commensurate Ext.data.Api.actions action is not configured, then
<p>Reloads the Record cache from the configured Proxy using the configured
Loads data from a passed data block and fires the {@link #load} event. A {@link Ext.data.Reader Reader}
Gets the number of cached records.
Gets the total number of records in the dataset as returned by the server.
Returns an object describing the current sort state of this Store.
Sets the default sort column and order to be used by the next {@link #load} operation.
Sort the Records.
Sorts the store contents by a single field and direction. This is called internally by {@link sort} and would
Sorts the contents of this store by multiple field/direction sorters. This is called internally by {@link sort}
Calls the specified function for each of the {@link Ext.data.Record Records} in the cache.
Gets all {@link Ext.data.Record records} modified since the last commit.  Modified records are
Sums the value of <tt>property</tt> for each {@link Ext.data.Record record} between <tt>start</tt>
Filter the {@link Ext.data.Record records} by a specified property. Alternatively, pass an array of filter
Filter by a function. The specified function will be called for each
Revert to a view of the Record cache with no filtering applied.
Returns true if this store is currently filtered
Query the records by a specified property.
Query the cached records in this Store using a filtering function. The specified function
Finds the index of the first matching Record in this store by a specific field value.
Finds the index of the first matching Record in this store by a specific field value.
Find the index of the first matching Record in this Store by a function.
Collects unique values for a particular dataIndex from this store.
Commit all Records with {@link #getModifiedRecords outstanding changes}. To handle updates for changes,
{@link Ext.data.Record#reject Reject} outstanding changes on all {@link #getModifiedRecords modified records}.
Set the value for a property name in this store's {@link #baseParams}.  Usage:</p><pre><code>
The root node for this tree
Returns the root node for this tree.
Sets the root node for this tree.
Gets a node in this tree by its id.
The attributes supplied for the node. You can use this property to access any custom attributes you supplied.
The node id. @type String
All child nodes of this node. @type Array
The parent node for this node. @type Node
The first direct child node of this node, or null if this node has no child nodes. @type Node
The last direct child node of this node, or null if this node has no child nodes. @type Node
The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node
The node immediately following this node in the tree, or null if there is no sibling node. @type Node
Returns true if this node is a leaf
Returns true if this node is the last child of its parent
Returns true if this node is the first child of its parent
Returns true if this node has one or more child nodes, else false.
Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>
Insert node(s) as the last child node of this node.
Removes a child node from this node.
Destroys the node.
Inserts the first node before the second node in this nodes childNodes collection.
Removes this node from its parent
Removes all child nodes from this node.
Returns the child node at the specified index.
Replaces one child node in this node with another.
Returns the index of a child node
Returns the tree this node is in.
Returns depth of this node (the root node has a depth of 0)
Changes the id of this node.
Returns the path for this node. The path can be used to expand or select this node programmatically.
Bubbles up the tree from this node, calling the specified function with each node. The arguments to the function
Cascades down the tree from this node, calling the specified function with each node. The arguments to the function
Interates the child nodes of this node, calling the specified function with each node. The arguments to the function
Finds the first child that has the attribute with the specified value.
Finds the first child by a custom function. The child matches if the function passed returns <code>true</code>.
Sorts this nodes children using the supplied sort function.
Returns true if this node is an ancestor (at any point) of the passed node.
Returns true if the passed node is an ancestor (at any point) of this node.
This DataReader's configured metadata as passed to the constructor.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method, overridden in DataReader extensions such as {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}
Abstract method overridden in DataReader extensions such as {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}
Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.
Used for updating a non-phantom or "real" record's data with fresh data from server after remote-save.
returns extracted, type-cast rows of data.  Iterates to call #extractValues for each row
Returns true if the supplied data-hash <b>looks</b> and quacks like data.  Checks to see if it has a key
This JsonReader's metadata as passed to the constructor, or as passed in
This method is only used by a DataProxy which has retrieved data from a remote server.
Decode a JSON response from server.
Create a data block containing Ext.data.Records from a JSON object.
After any data loads, the raw JSON data is available for further custom processing.  If no data is
type-casts a single row of raw-data from server
HttpProxy implementation of DataProxy#doRequest
Callback for read actions
Callback for write actions
Abort the current server request.
The Connection object (Or options parameter to {@link Ext.Ajax#request}) which this HttpProxy
Return the {@link Ext.data.Connection} object being used by this Proxy.
Used for overriding the url used for a single request.  Designed to be called during a beforeaction event.  Calling setUrl
HttpProxy implementation of DataProxy#doRequest
Returns a callback function for a request.  Note a special case is made for the
Callback for read action
Callback for write actions
Final action of a write event.  Apply the written data-object to params.
Implements abstract Ext.data.DataWriter#createRecord
Implements abstract Ext.data.DataWriter#updateRecord
Implements abstract Ext.data.DataWriter#destroyRecord
Clears any existing grouping and refreshes the data using the default sort.
Groups the data by the specified field.
<p>Redefines the Proxy's API or a single action of an API. Can be called with two method signatures.</p>
Returns true if the specified action is defined as a unique action in the api-config.
All proxy actions are executed through this method.  Automatically fires the "before" + action event
<b>Deprecated</b> load method using old method signature. See {@doRequest} for preferred method.
buildUrl
Destroys the proxy by purging any event listeners and cancelling any active requests.
This method is only used by a DataProxy which has retrieved data from a remote server.
Create a data block containing Ext.data.Records from an XML document.
After any data loads/reads, the raw XML Document is available for further custom processing.
Decode an XML response from server.
build response-data extractor functions.
Creates a function to return some particular key of data from a response.
extracts values and type-casts a row of data from server, extracted by #extractData
Compiles a Store recordset into a data-format defined by an extension such as {@link Ext.data.JsonWriter} or {@link Ext.data.XmlWriter} in preparation for a {@link Ext.data.Api#actions server-write action}.  The first two params are similar similar in nature to {@link Ext#apply},
abstract method meant to be overridden by all DataWriter extensions.  It's the extension's job to apply the "data" to the "params".
Converts a Record to a hash, taking into account the state of the Ext.data.Record along with configuration properties
Converts a {@link Ext.data.DataWriter#toHash Hashed} {@link Ext.data.Record} to fields-array array suitable
Create a data block containing Ext.data.Records from an Array.
XmlWriter implementation of the final stage of a write action.
createRecord
updateRecord
destroyRecord
Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
Disables the mask to prevent it from being displayed
Enables the mask so that it can be displayed
Show this LoadMask over the configured Element.
Hide this LoadMask.
Sets this button's arrow click handler.
The {@link Ext.DatePicker} instance for this DateMenu
If <code>{@link #floating}=true</code>, shows this menu relative to
Displays this menu at a specific xy position and fires the 'show' event if a
Hides this menu and optionally all parent menus
Adds a separator bar to the menu
Adds an {@link Ext.Element} object to the menu
Adds an existing object based on {@link Ext.menu.BaseItem} to the menu
Creates a new {@link Ext.menu.Item} based an the supplied config object and adds it to the menu
Creates a new {@link Ext.menu.TextItem} with the supplied text and adds it to the menu
A function that handles the checkchange event.  The function is undefined by default, but if an implementation
Set the checked state of this item
Hides all menus that are currently visible
Returns a {@link Ext.menu.Menu} object
Sets the text to display in this menu item
Sets the CSS class to apply to the item's icon element
Sets the function that will handle click events for this item (equivalent to passing in the {@link #handler}
<p>Adds element(s) to the toolbar -- this function takes a variable number of
Adds a separator
Adds a spacer element
Forces subsequent additions into the float:right toolbar
Adds any standard HTML element to the toolbar
Adds any Toolbar.Item or subclass
Adds a button (or buttons). See {@link Ext.Button} for more info on the config.
Adds text to the toolbar
Adds a new element to the toolbar from the passed {@link Ext.DomHelper} config
Adds a dynamically rendered Ext.form field (TextField, ComboBox, etc). Note: the field should not have
Inserts any {@link Ext.Toolbar.Item}/{@link Ext.Button} at the specified index.
Updates this item's text, setting the text to be used as innerHTML.
Gets the proxy's element
Gets the proxy's ghost element
Gets the proxy's element
Hides the proxy
Shows the proxy
Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel
Set this property to <tt>true</tt> to disable the header click handler disabling sort
<p>Function which can be overridden which returns the data object passed to this
When a Tooltip is configured with the <code>{@link #delegate}</code>
Binds this ToolTip to the specified element. The tooltip will be displayed when the mouse moves over the element.
Hides this tooltip if visible.
Shows this tooltip at the current event target XY position.
Initialize the global QuickTips instance and prepare any quick tips.
Enable quick tips globally.
Disable quick tips globally.
Returns true if quick tips are enabled, else false.
Gets the global QuickTips instance.
Configures a new quick tip instance and assigns it to a target element.  See
Removes any registered quick tip from the target element and destroys it.
Alias of {@link #register}.
Shows this tip at the specified XY position.  Example usage:
<b>Experimental</b>. Shows this tip at a position relative to another element using a standard {@link Ext.Element#alignTo}
Configures a new quick tip instance and assigns it to a target element.  The following config values are
Removes this quick tip from its element and destroys it.
Hides a visible tip or cancels an impending show for a particular element.
Used to create the text that appears in the Tip's body. By default this just returns
Refreshes the view by reloading the data from the store and re-rendering the template.
Function which can be overridden to provide custom formatting for each Record that is used by this
<p>Function which can be overridden which returns the data object passed to this
Refreshes an individual node's data from the store.
Returns the store associated with this DataView.
Changes the data store bound to this view and refreshes it.
Returns the template node the passed child belongs to, or null if it doesn't belong to one.
Gets the number of selected nodes.
Gets the currently selected nodes.
Gets the indexes of the selected nodes.
Gets an array of the selected records
Gets an array of the records from an array of nodes
Gets a record from a node
Clears all selections.
Returns true if the passed node is selected, else false.
Deselects a node.
Selects a set of nodes.
Selects a range of nodes. All nodes between start and end are selected.
Gets a template node.
Gets a range nodes.
Finds the index of the passed node.
Changes the data store bound to this view and refreshes it. (deprecated in favor of bindStore)
The starting z-index for windows in this WindowGroup (defaults to 9000)
<p>Registers a {@link Ext.Window Window} with this WindowManager. This should not
<p>Unregisters a {@link Ext.Window Window} from this WindowManager. This should not
Gets a registered window by id.
Brings the specified window to the front of any other active windows in this WindowGroup.
Sends the specified window to the back of other active windows in this WindowGroup.
Hides all windows in this WindowGroup.
Gets the currently-active window in this WindowGroup.
Returns zero or more windows in this WindowGroup using the custom search function passed to this method.
Executes the specified function once for every window in this WindowGroup, passing each
Starts the editing process and shows the editor.
Sets the height and width of this editor.
Realigns the editor to the bound field based on the current alignment config value.
Ends the editing process, persists the changed value to the underlying field, and hides the editor.
Cancels the editing process and hides the editor without persisting any changes.  The field value will be
Sets the data value of the editor
Gets the data value of the editor
The proxy Element that is resized in place of the real Element during the resize operation.
Perform a manual resize and fires the 'resize' event.
<p>Performs resizing of the associated Element. This method is called internally by this
Returns the element this component is bound to.
Returns the resizeChild element (or null).
Destroys this resizable. If the element was wrapped and
Sets the active (visible) item in the layout.
Read only. The CSS style specification string added to field labels in this layout if not
<p>Provides template arguments for rendering the fully wrapped, labeled and styled form Field.</p>
Sets the active (expanded) item in the layout.
True if this region is collapsed. Read-only.
This region's panel.  Read-only.
This region's layout.  Read-only.
This region's layout position (north, south, east, west or center).  Read-only.
True if this region is currently visible, else false.
Returns the current margins for this region.  If the region is collapsed, the
Returns the current size of this region.  If the region is collapsed, the size of the
Sets the specified panel as the container element for this region.
Returns the minimum allowable width for this region.
Returns the minimum allowable height for this region.
If this Region is {@link #floatable}, this method slides this Region into full visibility <i>over the top
If this Region is {@link #floatable}, and this Region has been slid into floating visibility, then this method slides
Returns a reference to the split bar in use by this region.
A reference to the {@link Ext.Component} that is active.  For example, <pre><code>
This monitorResize flag will be renamed soon as to avoid confusion
Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
The {@link Ext.Template Ext.Template} used by Field rendering layout classes (such as
Resizes and repositions each child component
Replaces any existing disabled dates with new values and refreshes the DatePicker.
Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.
Replaces any existing {@link #minDate} with the new value and refreshes the DatePicker.
Replaces any existing {@link #maxDate} with the new value and refreshes the DatePicker.
Sets the value of the date field
Gets the current selected value of the date field
Filter the data by a specific attribute.
Filter by a function. The passed function will be called with each
Clears the current filter. Note: with the "remove" option
The loader used by this node (defaults to using the tree's defined loader)
Returns true if this node is currently loading
Returns true if this node has been loaded
Trigger a reload for this node
Select a node.
Deselect a node.
Clear all selections
Get the selected node
Returns true if the node is selected
Selects the node above the selected node in the tree, intelligently walking the nodes
Selects the node above the selected node in the tree, intelligently walking the nodes
Select a node.
Deselect a node.
Clear all selections
Returns true if the node is selected
Returns an array of the selected nodes
The root node of this tree.
Returns this root node for this tree
Sets the root node for this tree. If the TreePanel has already rendered a root node, the
Gets a node in this tree by its id
Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. 'id')
Returns the default {@link Ext.tree.TreeLoader} for this TreePanel.
Expand all nodes
Collapse all nodes
Returns the selection model used by this TreePanel.
Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Ext.data.Node#getPath}
Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Ext.data.Node#getPath}
Returns the underlying Element for this tree
The dropZone used by this tree if drop is enabled (see {@link #enableDD} or {@link #enableDrop})
The dragZone used by this tree if drag is enabled (see {@link #enableDD} or {@link #enableDrag})
Destroy the root node. Not included by itself because we need to pass the silent parameter.
Load an {@link Ext.tree.TreeNode} from the URL specified in the constructor.
<p>Override this function for custom TreeNode node implementation, or to
Edit the text of the passed {@link Ext.tree.TreeNode TreeNode}.
The {@link Ext.tree.TreeNode TreeNode} this editor is bound to. Read-only.
Read-only. The text for this node. To change it use <code>{@link #setText}</code>.
True if this node is disabled.
True if this node is hidden.
Read-only. The UI for this node
Returns true if this node is expanded
Returns the UI object for this node.
Sets the text for this node
Triggers selection of this node
Triggers deselection of this node
Returns true if this node is selected
Expand this node.
Collapse this node.
Toggles expanded/collapsed state of the node
Ensures all parent nodes are expanded, and if necessary, scrolls
Expand all child nodes
Collapse all child nodes
Disables this node
Enables this node
The TreePanel for this drop zone
Arbitrary data that can be associated with this tree and will be included in the event object that gets
The TreePanel for this drag zone
Adds one or more CSS classes to the node's UI element.
Removes one or more CSS classes from the node's UI element.
Hides this node.
Shows this node.
Sets the checked status of the tree node to the passed value, or, if no value was passed,
Returns the element which encapsulates this node.
Returns the &lt;a> element that provides focus for the node's UI.
Returns the text node.
Returns the icon &lt;img> element.
Returns the checked status of the node. If the node was rendered with no
This Component's initial configuration specification. Read-only.
<p>The {@link Ext.Element} which encapsulates this Component. Read-only.</p>
This Component's owner {@link Ext.Container Container} (defaults to undefined, and is set automatically when
True if this component is hidden. Read-only.
True if this component is disabled. Read-only.
True if this component has been rendered. Read-only.
<p>Render this Component into the passed HTML element.</p>
Update the content area of a component.
Apply this component to existing markup that is valid. With this function, no call to render() is required.
Adds a CSS class to the component's underlying element.
Removes a CSS class from the component's underlying element.
Destroys this component by purging any event listeners, removing the component's element from the DOM,
<p>Returns the {@link Ext.Element} which encapsulates this Component.</p>
Returns the <code>id</code> of this component or automatically generates and
Returns the <code>{@link #itemId}</code> of this component.  If an
Try to focus this component.
Disable this component and fire the 'disable' event.
Enable this component and fire the 'enable' event.
Convenience function for setting disabled/enabled by boolean.
Show this component.  Listen to the '{@link #beforeshow}' event and return
Hide this component.  Listen to the '{@link #beforehide}' event and return
Convenience function to hide or show this component by boolean.
Returns true if this component is visible.
Clone the current component using the original config values passed into this instance by default.
Gets the xtype for this component as registered with {@link Ext.ComponentMgr}. For a list of all
<p>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
<p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
Find a container above this component at any level by a custom function. If the passed function returns
Find a container above this component at any level by xtype or class
<p>Adds listeners to any Observable object (or Elements) which are automatically removed when this Component
Removes listeners that were added by the {@link #mon} method.
Returns the next component in the owning container
Returns the previous component in the owning container
Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.
Sets the url for installing flash if it doesn't exist. This should be set to a local resource.
Sets a single style value on the Chart instance.
Resets all styles on the Chart instance.
Sets the styles on all series in the Chart.
Changes the data store bound to this chart and refreshes it.
Sets the url to load the chart from. This should be set to a local resource.
The type of axis.
The direction in which the axis is drawn. May be "horizontal" or "vertical".
If true, the items on the axis will be drawn in opposite direction.
A string reference to the globally-accessible function that may be called to
If true, labels that overlap previously drawn labels on the axis will be hidden.
The space, in pixels, between labels on an axis.
The minimum value drawn by the axis. If not set explicitly, the axis
The maximum value drawn by the axis. If not set explicitly, the axis
The spacing between major intervals on this axis.
The spacing between minor intervals on this axis.
If true, the labels, ticks, gridlines, and other objects will snap to the
If true, and the bounds are calculated automatically, either the minimum
The scaling algorithm to use on this axis. May be "linear" or
Indicates whether to round the major unit.
Indicates whether to factor in the size of the labels when calculating a
Indicates the position of the axis relative to the chart
Indicates whether to extend maximum beyond data's maximum to the nearest
Indicates whether to extend the minimum beyond data's minimum to the
The minimum value drawn by the axis. If not set explicitly, the axis
The maximum value drawn by the axis. If not set explicitly, the axis
The spacing between major intervals on this axis.
The time unit used by the majorUnit.
The spacing between minor intervals on this axis.
The time unit used by the minorUnit.
If true, the labels, ticks, gridlines, and other objects will snap to the
Series that are stackable will only stack when this value is set to true.
Indicates whether to factor in the size of the labels when calculating a
A list of category names to display along this axis.
Indicates whether or not to calculate the number of categories (ticks and
The type of series.
The human-readable name of the series.
The field used to access the x-axis value from the items from the data
The field used to access the y-axis value from the items from the data
False to not show this series in the legend. Defaults to <tt>true</tt>.
Indicates which axis the series will bind to
<p><b>Deprecated</b>. <code>paramNames</code> should be set in the <b>data store</b>
The number of records to display per page.  See also <tt>{@link #cursor}</tt>.
Indicator for the record position.  This property might be used to get the active page
Change the active page
Move to the first page, has the same effect as clicking the 'first' button.
Move to the previous page, has the same effect as clicking the 'previous' button.
Move to the next page, has the same effect as clicking the 'next' button.
Move to the last page, has the same effect as clicking the 'last' button.
Refresh the current page, has the same effect as clicking the 'refresh' button.
Binds the paging toolbar to the specified {@link Ext.data.Store}
Unbinds the paging toolbar from the specified {@link Ext.data.Store} <b>(deprecated)</b>
Binds the paging toolbar to the specified {@link Ext.data.Store} <b>(deprecated)</b>
<p>Reconfigures the grid to use a different Store and Column Model
Returns the grid's underlying element.
Returns the grid's selection model configured by the <code>{@link #selModel}</code>
Returns the grid's data store.
Returns the grid's ColumnModel.
Returns the grid's GridView object.
Called to get grid's drag proxy text, by default returns this.ddText.
Sets the source data object containing the property data.  The data object can contain one or more name/value
Gets the source data object containing the property data.  See {@link #setSource} for details regarding the
Sets the value of a property.
Removes a property from the grid.
Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom
<p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations
<i>Read-only</i>. The GridView's body Element which encapsulates all rows in the Grid.
<p>Return the index of the grid column which contains the passed HTMLElement.</p>
Return the HtmlElement representing the grid row which contains the passed element.
<p>Return the index of the grid row which contains the passed HTMLElement.</p>
Return the HtmlElement representing the grid row body which contains the passed element.
Return the <tt>&lt;div></tt> HtmlElement which represents a Grid row for the specified index.
Returns the grid's <tt>&lt;td></tt> HtmlElement at the specified coordinates.
Return the <tt>&lt;td></tt> HtmlElement which represents the Grid's header cell for the specified column index.
Scrolls the grid to the top
Focuses the specified row.
Focuses the specified cell.
Refreshs the grid UI
Select records.
Gets the number of selected rows.
Selects the first row in the grid.
Select the last row.
Selects the row immediately following the last selected row.
Selects the row that precedes the last selected row.
Returns true if there is a next record to select
Returns true if there is a previous record to select
Returns the selected records
Returns the first selected record.
Calls the passed function with each selection. If the function returns
Clears all selections if the selection model
Selects all rows if the selection model
Returns <tt>true</tt> if there is a selection.
Returns <tt>true</tt> if the specified row is selected.
Returns <tt>true</tt> if the specified record id is selected.
Selects multiple rows.
Selects a range of rows if the selection model
Deselects a range of rows if the selection model
Selects a row.  Before selecting a row, checks if the selection model
Deselects a row.  Before deselecting a row, checks if the selection model
<p>The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.</p>
<p>The provided implementation of the onInitDrag method. Sets the <tt>innerHTML</tt> of the drag proxy which provides the "picture"
An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight
<p>An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.</p>
Starts editing the specified for the specified row/column
Stops any active editing
Toggle the group that contains the specific row.
Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.
Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.
Expands all grouped rows.
Collapses all grouped rows.
Dynamically tries to determine the groupId of a specific value
The GridPanel for which this SelectionModel is handling selection. Read-only.
init : function(grid){
Locks the selections.
Unlocks the selections.
Returns true if the selections are locked.
An Array of {@link Ext.grid.Column Column definition} objects representing the configuration
Returns the id of the column at the specified index.
<p>Reconfigures this column model according to the passed Array of column definition objects.
Returns the column for a specified id.
Returns the index for a specified column id.
Moves a column from one position to another.
Returns the number of columns.
Returns the column configs that return true by the passed function that is called
Returns true if the specified column is sortable.
Returns true if the specified column menu is disabled.
Returns the rendering (formatting) function defined for the column.
Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some
Returns the width for the specified column.
Sets the width for a column.
Returns the total width of all columns.
Returns the header for the specified column.
Sets the header for a column.
Returns the tooltip for the specified column.
Sets the tooltip for a column.
Returns the dataIndex for the specified column.
Sets the dataIndex for a column.
Finds the index of the first matching column for the given dataIndex.
Returns true if the cell is editable.
Returns the editor defined for the cell/column.
Sets if a column is editable.
Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#hidden hidden}</code>,
Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#fixed fixed}</code>,
Returns true if the column can be resized
Sets if a column is hidden.
Sets the editor for a column and destroys the prior editor.
Destroys this column model by purging any event listeners, and removing any editors.
initEvents : function(){
Returns an array containing the row and column indexes of the currently selected cell
If anything is selected, clears all selections and fires the selectionchange event.
Returns <tt>true</tt> if there is a selection.
handleMouseDown : function(g, row, cell, e){
Selects a cell.  Before selecting a cell, fires the
handleKeyDown : function(e){
Optional. A function which returns displayable data when passed the following parameters:
Sets a new editor for this column.
Returns the {@link Ext.Editor editor} defined for this column that was created to wrap the {@link Ext.form.Field Field}
this.el = Ext.get(dragElement, true);
this.resizingEl = Ext.get(resizingElement, true);
The increment, in pixels by which to move this SplitBar. When <i>undefined</i>, the SplitBar moves smoothly.
The minimum size of the resizing element. (Defaults to 0)
The maximum size of the resizing element. (Defaults to 2000)
Whether to animate the transition to the new size
Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes.
this.shim = null;
this.proxy = Ext.SplitBar.createProxy(this.orientation);
this.dd = new Ext.dd.DDProxy(this.el.dom.id, "XSplitBars", {dragElId : this.proxy.id});
this.dd.b4StartDrag = this.onStartProxyDrag.createDelegate(this);
this.dd.endDrag = this.onEndProxyDrag.createDelegate(this);
this.dragSpecs = {};
this.placement = placement || (this.el.getX() > this.resizingEl.getX() ? Ext.SplitBar.LEFT : Ext.SplitBar.RIGHT);
this.placement = placement || (this.el.getY() > this.resizingEl.getY() ? Ext.SplitBar.TOP : Ext.SplitBar.BOTTOM);
Get the adapter this SplitBar uses
Set the adapter this SplitBar uses
Gets the minimum size for the resizing element
Sets the minimum size for the resizing element
Gets the maximum size for the resizing element
Sets the maximum size for the resizing element
Sets the initialize size for the resizing element
Destroy this splitbar.
Called before drag operations to get the current size of the resizing element.
Called after drag operations to set the size of the resizing element.
Orientation constant - Create a vertical SplitBar
Orientation constant - Create a horizontal SplitBar
Placement constant - The resizing element is to the left of the splitter element
Placement constant - The resizing element is to the right of the splitter element
Placement constant - The resizing element is positioned above the splitter element
Placement constant - The resizing element is positioned under splitter element
Sets the button's active menu item.
Gets the currently active menu item.
This is normally called internally on button click, but can be called externally to advance the button's
True to scan the markup in this tab panel for <tt>{@link #autoTabs}</tt> using the
<p>Provides template arguments for rendering a tab selector item in the tab strip.</p>
Gets the DOM element for the tab strip item which activates the child panel with the specified
Suspends any internal calculations or scrolling while doing a bulk operation. See {@link #endUpdate}
Resumes calculations and scrolling at the end of a bulk operation. See {@link #beginUpdate}
Hides the tab strip item for the passed tab
Unhides the tab strip item for the passed tab
Sets the specified tab as the active tab. This method fires the {@link #beforetabchange} event which
Returns the Component which is the currently active tab. <b>Note that before the TabPanel
Gets the specified tab by id.
Scrolls to a particular tab if tab scrolling is enabled
See {@link #setActiveTab}. Sets the specified tab as the active tab. This method fires
Protected method that will not generally be called directly. It
Toggles the editor between standard and source edit mode.
Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
Protected method that will not generally be called directly. If you need/want
Protected method that will not generally be called directly. Syncs the contents
Protected method that will not generally be called directly. Pushes the value of the textarea
Protected method that will not generally be called directly. It triggers
Executes a Midas editor command on the editor document and performs necessary focus and
Executes a Midas editor command directly on the editor document.
Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
Returns the editor's toolbar. <b>This is only available after the editor has been rendered.</b>
Object collection of toolbar tooltips for the buttons in the editor. The key
Returns the checked state of the checkbox.
Sets the checked state of the checkbox, fires the 'check' event, and calls a
Runs all of NumberFields validations and returns an array of any errors. Note that this first
Replaces any existing {@link #minValue} with the new value.
Replaces any existing {@link #maxValue} with the new value.
Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
<p>The label Element associated with this Field. <b>Only available after this Field has been rendered by a
Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
The original value of the field as configured in the {@link #value} configuration, or
<p>Returns true if the value of this Field has been changed from its original value.
Sets the read only state of this field.
Resets the current field value to the originally loaded value and clears any validation messages.
<p>The value that the Field had at the time it was last focused. This is the value that is passed
Returns whether or not the field value is currently valid by
Validates the field value
This method should only be overridden if necessary to prepare raw values
Uses getErrors to build an array of validation errors. If any errors are found, markInvalid is called
Runs this field's validators and returns an array of error messages for any validation failures.
Gets the active error message for this field.
<p>Display an error message associated with this field, using {@link #msgTarget} to determine how to
Clear any invalid styles/messages for this field
Sets the current activeError to the given string. Fires the 'invalid' event.
Clears the activeError and fires the 'valid' event. This is called internally by clearInvalid and would not
Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.
Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.
Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.
Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.
Resets the current field value to the originally-loaded value and clears any validation messages.
<p>Validates a value according to the field's validation rules and returns an array of errors
Selects text in this field
Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
Replaces any existing {@link #minValue} with the new time and refreshes the store.
Replaces any existing {@link #maxValue} with the new time and refreshes the store.
Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
If this radio is part of a group, it will return the selected value
Sets either the checked/unchecked status of this Radio, or, if a string value
The value of the match string used to filter the store. Delete this property to force a requery.
The {@link Ext.DataView DataView} used to display the ComboBox's options.
<p>Returns the element used to house this ComboBox's pop-up list. Defaults to the document body.</p>
Returns the store associated with this combo.
Returns the currently selected field value or empty string if no value is set.
Clears any text/value currently set in the field
Sets the specified value into the field.  If the value finds a match, the corresponding record text
Returns true if the dropdown list is expanded, else false.
Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
Execute a query to filter the dropdown list.  Fires the {@link #beforequery} event prior to performing the
Hides the dropdown list if it is currently expanded. Fires the {@link #collapse} event on completion.
Expands the dropdown list if it is currently hidden. Fires the {@link #expand} event on completion.
Initialize the component.
Set up the hidden field
Ensure that the slider size is set automatically when the field resizes.
Initialize any events for this class.
Utility method to set the value of the field when the slider changes.
Enable the slider when the field is enabled.
Disable the slider when the field is disabled.
Ensure the slider is destroyed when the field is destroyed.
If a side icon is shown, do alignment to the slider
Sets the minimum field value.
Sets the maximum field value.
Sets the value for this field.
Gets the current value for this field.
Updates the label's innerHTML with the specified string.
The function used to validate email addresses.  Note that this is a very basic validation -- complete
The error text to display when the email validation function returns false.  Defaults to:
The keystroke filter mask to be applied on email input.  See the {@link #email} method for
The function used to validate URLs
The error text to display when the url validation function returns false.  Defaults to:
The function used to validate alpha values
The error text to display when the alpha validation function returns false.  Defaults to:
The keystroke filter mask to be applied on alpha input.  Defaults to:
The function used to validate alphanumeric values
The error text to display when the alphanumeric validation function returns false.  Defaults to:
The keystroke filter mask to be applied on alphanumeric input.  Defaults to:
Replaces any existing disabled dates with new values and refreshes the DatePicker.
Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.
Replaces any existing <tt>{@link #minValue}</tt> with the new value and refreshes the DatePicker.
Replaces any existing <tt>{@link #maxValue}</tt> with the new value and refreshes the DatePicker.
Runs all of NumberFields validations and returns an array of any errors. Note that this first
Returns the current date value of the date field.
Sets the value of the date field.  You can pass a date object or any string that can be
Runs CheckboxGroup's validations and returns an array of any errors. The only error by default
{@link Ext.form.Checkbox#setValue Set the value(s)} of an item or items
Gets an array of the selected {@link Ext.form.Checkbox} in the group.
A {@link Ext.util.MixedCollection MixedCollection} containing all the Ext.form.Fields in this form.
By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific
Get the HTML form Element
Destroys this object.
Returns true if client-side validation on the form is successful.
<p>Returns true if any fields in this form have changed from their original values.</p>
Performs a predefined action ({@link Ext.form.Action.Submit} or
Shortcut to {@link #doAction do} a {@link Ext.form.Action.Submit submit action}.
Shortcut to {@link #doAction do} a {@link Ext.form.Action.Load load action}.
Persists the values in this form into the passed {@link Ext.data.Record} object in a beginEdit/endEdit block.
Loads an {@link Ext.data.Record} into this form by calling {@link #setValues} with the
Find a {@link Ext.form.Field} in this form.
Mark fields in this form invalid in bulk.
Set values for fields in this form in bulk.
<p>Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.
Retrieves the fields in the form as a set of key/value pairs, using the {@link Ext.form.Field#getValue getValue()} method.
Clears all invalid messages in this form.
Resets this form.
Add Ext.form Components to this form's Collection. This does not result in rendering of
Removes a field from the items collection (does NOT remove its markup).
Removes all fields from the collection that have been destroyed.
Iterates through the {@link Ext.form.Field Field}s which have been {@link #add add}ed to this BasicForm,
Calls {@link Ext#apply} for all fields in this form with the passed object.
Calls {@link Ext#applyIf} for all field in this form with the passed object.
This function is called by the fieldset's checkbox when it is toggled (only applies when
Called if combineErrors is true and a subfield's markInvalid method is called.
Called if combineErrors is true and a subfield's clearInvalid method is called.
Performs validation checks on each subfield and returns false if any of them fail validation.
Takes an object containing error messages for contained fields, returning a combined error
Sorts the internal fieldErrors MixedCollection by the order in which the fields are defined.
Resets each field in the composite to their previous value
Calls clearInvalid on all child fields. This is a convenience function and should not often need to be called
Builds a label string from an array of subfield labels.
Checks each field in the composite and returns true if any is dirty
The function that should handle the trigger's click event.  This method does nothing by default
The function that should handle the trigger's click event.  This method does nothing by default
The function that should handle the trigger's click event.  This method does nothing by default
Provides access to the {@link Ext.form.BasicForm Form} which this Panel contains.
Starts monitoring of the valid state of this form. Usually this is done by passing the config
Stops monitoring of the valid state of this form
This is a proxy for the underlying BasicForm's {@link Ext.form.BasicForm#load} call.
Gets the selected {@link Ext.form.Radio} in the group, if it exists.
Sets the checked radio in the group.
Failure type returned when client side validation of the Form fails
<p>Failure type returned when server side processing fails and the {@link #result}'s
Failure type returned when a communication error happens when attempting
Failure type returned when the response's <tt style="font-weight:bold">success</tt>
The type of action this Action instance performs.
The type of failure detected will be one of these: {@link #CLIENT_INVALID},
The XMLHttpRequest object used to perform the action.
The decoded response object containing a boolean <tt style="font-weight:bold">success</tt> property and
Read-only. True if this button is hidden
Read-only. True if this button is disabled
Read-only. True if this button is pressed (only if enableToggle = true)
<p>This method returns an Array which provides substitution parameters for the {@link #template Template} used
An {@link Ext.Element Element} encapsulating the Button's clickable element. By default,
Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
Sets the tooltip for this Button.
Assigns this Button's click handler
Sets this Button's text
Sets the background image (inline style) of the button.  This method also changes
Gets the text for this Button
If a state it passed, it becomes the pressed state otherwise the current state is toggled.
Show this button's menu (if it has one)
Hide this button's menu (if it has one)
Returns true if the button has a menu and it is visible
Gets the pressed button in the passed group or null
<p>An array of 6-digit color hex code strings (without the # symbol).  This array can contain any number
Selects the specified color in the palette (fires the {@link #select} event)
Registers a component.
Unregisters a component.
Returns a component by {@link Ext.Component#id id}.
Registers a function that will be called when a Component with the specified id is added to ComponentMgr. This will happen on instantiation.
The MixedCollection used internally for the component cache. An example usage may be subscribing to
The xtypes that have been registered with the component manager.
The ptypes that have been registered with the component manager.
Checks if a Component type is registered.
Checks if a Plugin type is registered.
<p>Registers a new Component constructor, keyed by a new
Creates a new Component from the specified config object using the
<p>Registers a new Plugin constructor, keyed by a new
Creates a new Plugin from the specified config object using the
Shorthand for {@link Ext.ComponentMgr#registerType}
Shorthand for {@link Ext.ComponentMgr#registerPlugin}
Shorthand for {@link Ext.ComponentMgr#create}
Sets the width and height of this BoxComponent. This method fires the {@link #resize} event. This method can accept
Sets the width of the component.  This method fires the {@link #resize} event.
Sets the height of the component.  This method fires the {@link #resize} event.
Gets the current size of the component's underlying element.
Gets the current width of the component's underlying element.
Gets the current height of the component's underlying element.
Gets the current size of the component's underlying element, including space taken by its margins.
Gets the current XY position of the component's underlying element.
Gets the current box measurements of the component's underlying element.
Sets the current box measurements of the component's underlying element.
<p>Returns the outermost Element of this Component which defines the Components overall size.</p>
Sets the overflow on the content element of the component.
Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.
Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.
Force the component's size to recalculate based on the underlying element's current height and width.
Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically
Displays the shadow under the target element
Returns true if the shadow is visible, else false
Direct alignment when values are already available. Show must be called at least once before
Hides this shadow
Adjust the z-index of this shadow
The Panel's header {@link Ext.Element Element}. Read-only.
The Panel's body {@link Ext.Element Element} which may be used to contain HTML content.
The Panel's bwrap {@link Ext.Element Element} used to contain other Panel elements
True if this panel is collapsed. Read-only.
The Panel's footer {@link Ext.Element Element}. Read-only.
<p>A {@link Ext.Toolbar Toolbar} object, a Toolbar config, or an array of
The event to listen to for resizing in layouts. Defaults to <tt>'bodyresize'</tt>.
This Panel's Array of buttons as created from the <code>{@link #buttons}</code>
Sets the CSS class that provides the icon image for this panel.  This method will replace any existing
Returns the {@link Ext.Toolbar toolbar} from the top (<code>{@link #tbar}</code>) section of the panel.
Returns the {@link Ext.Toolbar toolbar} from the bottom (<code>{@link #bbar}</code>) section of the panel.
Returns the {@link Ext.Toolbar toolbar} from the footer (<code>{@link #fbar}</code>) section of the panel.
Adds a button to this panel.  Note that this method must be called prior to rendering.  The preferred
<p>If this Panel is configured {@link #draggable}, this property will contain
Collapses the panel body so that it becomes hidden.  Fires the {@link #beforecollapse} event which will
Expands the panel body so that it becomes visible.  Fires the {@link #beforeexpand} event which will
Shortcut for performing an {@link #expand} or {@link #collapse} based on the current state of the panel.
Returns the width in pixels of the framing elements of this panel (not including the body width).  To
Returns the height in pixels of the framing elements of this panel (including any top and bottom bars and
Returns the width in pixels of the body element (not including the width of any framing elements).
Returns the height in pixels of the body element (not including the height of any framing elements).
<p>Sets the title text for the panel and optionally the {@link #iconCls icon class}.</p>
Get the {@link Ext.Updater} for this panel. Enables you to perform Ajax updates of this panel's body.
Loads this content panel immediately with content returned from an XHR call.
Retrieve a tool by id.
Sets the text to be displayed by all components using this action.
Gets the text currently displayed by all components using this action.
Sets the icon CSS class for all components using this action.  The class should supply
Gets the icon CSS class currently used by all components using this action.
Sets the disabled state of all components using this action.  Shortcut method
Enables all components using this action.
Disables all components using this action.
Returns true if the components using this action are currently disabled, else returns false.  
Sets the hidden state of all components using this action.  Shortcut method
Shows all components using this action.
Hides all components using this action.
Returns true if the components using this action are currently hidden, else returns false.  
Sets the function that will be called by each Component using this action when its primary event is triggered.
Executes the specified function once for each Component currently tied to this action.  The function passed
Executes this action manually using the handler function specified in the original config object
Returns a reference to the underlying {@link Ext.Window} element
Updates the message box body text
Updates a progress-style message box's text and progress bar. Only relevant on message boxes
Returns true if the message box is currently displayed
Hides the message box if it is displayed
Displays a new message box, or reinitializes an existing message box, based on the config options
Adds the specified icon to the dialog.  By default, the class 'ext-mb-icon' is applied for default
Displays a message box with a progress bar.  This message box has no buttons and is not closeable by
Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user
Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
Button config that displays a single OK button
Button config that displays a single Cancel button
Button config that displays OK and Cancel buttons
Button config that displays Yes and No buttons
Button config that displays Yes, No and Cancel buttons
The CSS class that provides the INFO icon image
The CSS class that provides the WARNING icon image
The CSS class that provides the QUESTION icon image
The CSS class that provides the ERROR icon image
The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)
The maximum width in pixels of the message box (defaults to 600)
The minimum width in pixels of the message box (defaults to 100)
The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful
The minimum width in pixels of the message box if it is a prompt dialog.  This is useful
An object containing the default button text strings that can be overriden for localized language support.
Shorthand for {@link Ext.MessageBox}
elements : 'header,body',
frame : true,
floating : true,
<p>If this Window is configured {@link #draggable}, this property will contain
Focuses the window.  If a defaultButton is set, it will receive focus, otherwise the
Sets the target element from which the window should animate while opening.
Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.
Hides the window, setting it to invisible and applying negative offsets.
Method that is called immediately before the <code>show</code> event is fired.
Method that is called immediately before the <code>hide</code> event is fired.
Placeholder method for minimizing the window.  By default, this method simply fires the {@link #minimize} event
<p>Closes the Window, removes it from the DOM, {@link Ext.Component#destroy destroy}s
Fits the window within its current container and automatically replaces
Restores a {@link #maximizable maximized}  window back to its original
A shortcut method for toggling between {@link #maximize} and {@link #restore} based on the current maximized
Aligns the window to the specified element
Anchors this window to another element and realigns it when the window is resized or scrolled.
Performs the anchor, using the saved anchorTarget property.
Removes any existing anchor from this window. See {@link #anchorTo}.
Brings this window to the front of any other visible windows
Makes this the active window by showing its shadow, or deactivates it by hiding its shadow.  This method also
Sends this window to the back of (lower z-index than) any other visible windows
Centers this window in the viewport
If true the container will automatically destroy any contained component that is removed from it, else
If true the container will force a layout initially even if hidden or collapsed. This option
True to hide the borders of each contained component, false to defer to the component's existing
<p>The default {@link Ext.Component xtype} of child Components to create in this Container when
The event to listen to for resizing in layouts. Defaults to <code>'resize'</code>.
The collection of components in this container as a {@link Ext.util.MixedCollection}
<p>Returns the Element to be used to contain the child Components of this Container.</p>
<p>Adds {@link Ext.Component Component}(s) to this Container.</p>
Inserts a Component into this Container at a specified index. Fires the
Removes a component from this container.  Fires the {@link #beforeremove} event before removing, then fires
Removes all components from this container.
Examines this container's <code>{@link #items}</code> <b>property</b>
Force this container's layout to be recalculated. A call to this function is required after adding a new component
Returns the layout currently in use by the container.  If the container does not currently have a layout
Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (<i>this</i>) of
Cascades down the component/container heirarchy from this component (called first), calling the specified function with
Find a component under this container at any level by id
Find a component under this container at any level by xtype or class
Find a component under this container at any level by property
Find a component under this container at any level by a custom function. If the passed function returns
Get a component contained by this container (alias for items.get(key))
Renders the thumb into a slider
Enables the thumb if it is currently disabled
Disables the thumb if it is currently enabled
Sets up an Ext.dd.DragTracker for this thumb
True while the thumb is in a drag operation
Creates a new thumb and adds it to the slider
Sets the minimum value for the slider instance. If the current value is less than the
Sets the maximum value for the slider instance. If the current value is more than the
Programmatically sets the value of the Slider. Ensures that the value is constrained within
Synchronizes the thumb position to the proper proportion of the total component width based
Returns the current value of the slider
Returns an array of values - one for the location of each thumb
Returns the current value of the slider
Programmatically sets the value of the Slider. Ensures that the value is constrained within
Synchronizes the thumb position to the proper proportion of the total component width based
Updates the progress bar value, and optionally its text.  If the text argument is not specified,
Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
Returns true if the progress bar is currently in a {@link #wait} operation
Updates the progress bar text.  If specified, textEl will be updated, otherwise the progress
Synchronizes the inner bar width to the proper proportion of the total componet width based
Sets the size of the progress bar.
Resets the progress bar value to 0 and text to empty string.  If hide = true, the progress
The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source is now over the
The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the target.
The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source has been dragged
The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the dragged item has
Template method which should be overridden by each DragTracker instance. Called when the user first clicks and
Template method which should be overridden by each DragTracker instance. Called when a drag operation starts
Template method which should be overridden by each DragTracker instance. Called whenever a drag has been detected.
Template method which should be overridden by each DragTracker instance. Called when a drag operation has been completed
Returns the drag target
Set to false to enable a DragDrop object to fire drag events while dragging
The id of the element associated with this object.  This is what we
Configuration attributes passed into the constructor
The id of the element that will be dragged.  By default this is same
The ID of the element that initiates the drag operation.  By default
An object who's property names identify HTML tags to be considered invalid as drag handles.
An object who's property names identify the IDs of elements to be considered invalid as drag handles.
An Array of CSS class names for elements to be considered in valid as drag handles.
The linked element's absolute X position at the time the drag was
The linked element's absolute X position at the time the drag was
The group defines a logical collection of DragDrop objects that are
Individual drag/drop instances can be locked.  This will prevent
Lock this instance
When set to true, other DD objects in cooperating DDGroups do not receive
Unlock this instace
By default, all instances can be a drop target.  This can be disabled by
The padding configured for this drag and drop object for calculating
Cached reference to the linked element
Internal typeof flag
Set to true when horizontal contraints are applied
Set to true when vertical contraints are applied
The left constraint
The right constraint
The up constraint
The down constraint
Maintain offsets when we resetconstraints.  Set to true when you want
Array of pixel locations the element will snap to if we specified a
Array of pixel locations the element will snap to if we specified a
By default the drag and drop instance will only respond to the primary
The available property is false until the linked dom element is accessible.
By default, drags can only be initiated if the mousedown occurs in the
Code that executes immediately before the startDrag event
Abstract method called after a drag/drop object is clicked
Code that executes immediately before the onDrag event
Abstract method called during the onMouseMove event while dragging an
Abstract method called when this element fist begins hovering over
Code that executes immediately before the onDragOver event
Abstract method called when this element is hovering over another
Code that executes immediately before the onDragOut event
Abstract method called when we are no longer hovering over an element
Code that executes immediately before the onDragDrop event
Abstract method called when this item is dropped on another DragDrop
Abstract method called when this item is dropped on an area with no
Code that executes immediately before the endDrag event
Fired when we are done dragging the object
Code executed immediately before the onMouseDown event
Event handler that fires when a drag/drop obj gets a mousedown
Event handler that fires when a drag/drop obj gets a mouseup
Override the onAvailable method to do what is needed after the initial
Provides default constraint padding to "constrainTo" elements (defaults to {left: 0, right:0, top:0, bottom:0}).
Initializes the drag drop object's constraints to restrict movement to a certain element.
Returns a reference to the linked element
Returns a reference to the actual element to drag.  By default this is
Sets up the DragDrop object.  Must be called in the constructor of any
Initializes Targeting functionality only... the object does not
Applies the configuration parameters that were passed into the constructor.
Executed when the linked element is available
Configures the padding for the target zone in px.  Effectively expands
Stores the initial placement of the linked element.
Sets the start position of the element.  This is set when the obj
Add this instance to a group of related drag/drop objects.  All
Remove's this instance from the supplied interaction group
Allows you to specify that an element other than the linked element
Allows you to specify a child of the linked element that should be
Allows you to set an element outside of the linked element as a drag
Remove all drag and drop hooks for this element
Returns true if this instance is locked, or the drag drop mgr is locked
Fired when this object is clicked
Allows you to specify a tag name that should not start a drag operation
Lets you to specify an element id for a child of a drag handle
Lets you specify a css class of elements that will not initiate a drag
Unsets an excluded tag name set by addInvalidHandleType
Unsets an invalid handle id
Unsets an invalid css class
Checks the tag exclusion list to see if this click should be ignored
Create the array of horizontal tick marks if an interval was specified
Create the array of vertical tick marks if an interval was specified in
By default, the element can be dragged any place on the screen.  Use
Clears any constraints applied to this instance.  Also clears ticks
Clears any tick interval defined for this instance
By default, the element can be dragged any place on the screen.  Set
resetConstraints must be called if you manually reposition a dd element.
Normally the drag element is moved pixel by pixel, but we can specify
toString method
Two dimensional Array of registered DragDrop objects.  The first
Array of element ids defined as drag handles.  Used to determine
the DragDrop object that is currently being dragged
the DragDrop object(s) that are being hovered over
the X distance between the cursor and the object being dragged
the Y distance between the cursor and the object being dragged
Flag to determine if we should prevent the default behavior of the
Flag to determine if we should stop the propagation of the events
Internal flag that is set to true when drag and drop has been
All drag and drop can be disabled.
Called the first time an element is registered.
In point mode, drag and drop interaction is defined by the
In intersect mode, drag and drop interaction is defined by the
The current drag and drop mode.  Default: POINT
Runs method on all drag and drop objects
Drag and drop initialization.  Sets up the global event handlers
Reset constraints on all drag and drop objs
Lock all drag and drop functionality
Unlock all drag and drop functionality
Is drag and drop locked?
Location cache that is set for all drag drop objects when a drag is
Set useCache to false if you want to force object the lookup of each
The number of pixels that the mouse needs to move after the
The number of milliseconds after the mousedown event to initiate the
Flag that indicates that either the drag pixel threshold or the
Timeout used for the click time threshold
The X position of the mousedown event stored for later use when a
The Y position of the mousedown event stored for later use when a
Each DragDrop instance must be registered with the DragDropMgr.
Removes the supplied dd instance from the supplied group. Executed
Unregisters a drag and drop item.  This is executed in
Each DragDrop handle element must be registered.  This is done
Utility function to determine if a given element has been
Returns the drag and drop instances that are in all groups the
Returns true if the specified dd target is a legal target for
My goal is to be able to transparently determine if an object is
Utility function to determine if a given element has been
Returns the DragDrop instance for a given id
Fired after a registered DragDrop object gets the mousedown event.
Fired when either the drag pixel threshol or the mousedown hold
Internal function to handle the mouseup event.  Will be invoked
Utility to stop event propagation and event default, if these
Internal function to clean up event handlers after the drag
Internal function to handle the mousemove event.  Will be invoked
Iterates over all of the DragDrop elements to find ones we are
Helper function for getting the best match from the list of drag
Refreshes the cache of the top-left and bottom-right points of the
This checks to make sure an element exists and is in the DOM.  The
Returns a Region object containing the drag and drop element's position
Checks the cursor location to see if it over the target
unload event handler
Cleans up the drag and drop events and objects.
A cache of DOM elements
Get the wrapper for the DOM element specified
Returns the actual DOM element
Returns the style property for the DOM element (i.e.,
Inner class for cached elements
The element
The element id
A reference to the style property
Returns the X position of an html element
Returns the Y position of an html element
Swap two nodes.  In IE, we use the native method, for others we
Returns the current scroll position
Returns the specified element style property
Gets the scrollTop
Gets the scrollLeft
Sets the x/y position of an element to the location of the
Numeric array sort function
Internal counter
Trying to make the load order less important.  Without this we get
Recursively searches the immediate parent and all child nodes for
When set to true, the utility automatically tries to scroll the browser
Sets the pointer offset to the distance between the linked element's top
Sets the pointer offset.  You can call this directly to force the
Sets the drag element to the location of the mousedown or click event,
Sets the element to the location of the mousedown or click event,
Saves the most recent position so that we can reset the constraints and
Auto-scroll the window if the dragged object has been moved beyond the
Finds the location the element should be placed if we want to move
Sets up config options specific to this class. Overrides
Event that fires prior to the onMouseDown event.  Overrides
Event that fires prior to the onDrag event.  Overrides
The default drag frame div id
By default we resize the drag frame to be the same size as the element
By default the frame is positioned exactly where the drag element is, so
Creates the proxy element if it does not yet exist
Initialization for the drag frame element.  Must be called in the
Resizes the drag frame to the dimensions of the clicked object, positions
The proxy is automatically resized to the dimensions of the linked
Registers new overflow element(s) to auto scroll
Unregisters overflow element(s) so they are no longer scrolled
The number of pixels from the top or bottom edge of a container the pointer needs to be to
The number of pixels from the right or left edge of a container the pointer needs to be to
The number of pixels to scroll in each scroll increment (defaults to 50)
The frequency of scrolls in milliseconds (defaults to 500)
True to animate the scroll (defaults to true)
The animation duration in seconds - 
Manually trigger a cache refresh.
Resgister a drag drop element
Unregister a drag drop element
Returns the handle registered for a DOM Node by id
Returns the handle that is registered for the DOM node that is the target of the event
Returns a custom data object that is registered for a DOM node by id
Returns a custom data object that is registered for the DOM node that is the target of the event
This property contains the data representing the dragged object. This data is set up by the implementation
Called when a mousedown occurs in this container. Looks in {@link Ext.dd.Registry}
Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
Called after a repair of an invalid drop. By default, highlights this.dragData.ddel 
Called before a repair of an invalid drop to get the XY to animate to. By default returns
Returns a custom data object associated with the DOM node that is the target of the event.  By default
Called when the DropZone determines that a {@link Ext.dd.DragSource} has entered a drop node
Called while the DropZone determines that a {@link Ext.dd.DragSource} is over a drop node
Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dragged out of
Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped onto
Called while the DropZone determines that a {@link Ext.dd.DragSource} is being dragged over it,
Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped on it,
The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source is now over
The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the drop zone.
The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source has been dragged
The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the dragged item has
Updates the proxy's visual element to indicate the status of whether or not drop is allowed
Resets the status indicator to the default dropNotAllowed value
Updates the contents of the ghost element
Returns the underlying proxy {@link Ext.Layer}
Returns the ghost element
Hides the proxy
Stops the repair animation if it's currently running
Displays this proxy
Force the Layer to sync its shadow and shim positions to the element
Causes the proxy to return to its position of origin via an animation.  Should be called after an
Returns the data object associated with this drag source
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action before the dragged
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action before the dragged
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action
An empty function by default, but provided so that you can perform a custom action after an invalid
An empty function by default, but provided so that you can perform a custom action before the initial
An empty function by default, but provided so that you can perform a custom action once the initial
Returns the drag source's underlying {@link Ext.dd.StatusProxy}
Hides the drag source's {@link Ext.dd.StatusProxy}
