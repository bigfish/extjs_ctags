Creates a stylesheet from a text blob of rules.
Removes a style or link tag by id
Dynamically swaps an existing stylesheet reference for a new one
Refresh the rule cache if you have dynamically added stylesheets
Measures the size of the specified text
Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
<p><b>Only available on the instance returned from {@link #createInstance}, <u>not</u> on the singleton.</b></p>
Returns the width in pixels of the passed text, or the width of the text in this Element.
Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
Checks a reference and converts it to empty string if it is undefined
Checks a reference and converts it to the default value if it's empty
Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.
Convert certain characters (&, <, >, and ') from their HTML character equivalents.
Trims any whitespace from either side of a string
Returns a substring from within an original string
Converts a string to all lower case letters
Converts a string to all upper case letters
Converts the first character only of a string to upper case
True to stop the event from bubbling and prevent the default browser action if the
Add a new binding to this KeyMap. The following config object properties are supported:
Enables the repeater and allows events to fire.
Disables the repeater and stops events from firing.
Convenience function for setting disabled/enabled by boolean.
Adds an item to the collection. Fires the {@link #add} event when complete.
MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
Replaces an item in the collection. Fires the {@link #replace} event when complete.
Adds all elements of an Array or an Object to the collection.
Executes the specified function once for every item in the collection, passing the following arguments:
Executes the specified function once for every key in the collection, passing each
Returns the first item in the collection which elicits a true return value from the
Inserts an item at the specified index in the collection. Fires the {@link #add} event when complete.
Remove an item from the collection.
Remove an item from a specified index in the collection. Fires the {@link #remove} event when complete.
Removed an item associated with the passed key fom the collection.
Returns the number of items in the collection.
Returns index within the collection of the passed Object.
Returns index within the collection of the passed key.
Returns the item associated with the passed key OR index.
Returns the item at the specified index.
Returns the item associated with the passed key.
Returns true if the collection contains the passed Object as an item.
Returns true if the collection contains the passed Object as a key.
Removes all items from the collection.  Fires the {@link #clear} event when complete.
Returns the first item in the collection.
Returns the last item in the collection.
Sorts this collection by <b>item</b> value with the passed comparison function.
Reorders each of the items based on a mapping from old index to new index. Internally this
Sorts this collection by <b>key</b>s.
Returns a range of items in this collection
Filter the <i>objects</i> in this collection by a specific property.
Filter by a function. Returns a <i>new</i> collection that has been filtered.
Finds the index of the first matching object in this collection by a specific property/value.
Find the index of the first matching object in this collection by a function.
Returns a regular expression based on the given value and matching options. This is used internally for finding and filtering,
Creates a shallow copy of this collection
This method calls {@link #item item()}.
Global flag which determines if strict date parsing should be used.
The id of the hidden field required for storing the current history token.
The id of the iframe required by IE to manage the history stack.
Initialize the global History instance.
Add a new token to the history stack. This can be any arbitrary value, although it would
Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).
Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).
Retrieves the currently-active history token.
Create a cookie with the specified name and value. Additional settings
Retrieves cookies that are accessible by the current page. If a cookie
Removes a cookie with the provided name from the browser
More flexible version of {@link #setStyle} for setting style properties.
Returns an object with properties matching the styles requested.
Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
Scrolls this element into view within the passed container.
Measures the element's content height and updates height to match. Note: this function uses setTimeout so
Convenience method for constructing a KeyMap
Creates a KeyMap for this element
Framework-wide error-handler.  Developers can override this method to provide
getName
getMessage
toJson
Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
Stops the specified event(s) from bubbling and optionally prevents the default action
Create an event handler on this element such that when the event fires and is handled by this element,
Removes worthless text nodes
Direct access to the Updater {@link Ext.Updater#update} method. The method takes the same object
Gets this element's {@link Ext.Updater Updater}
Update the innerHTML of this element, optionally searching for and processing scripts
Creates a proxy element of this element
Checks whether the element is currently visible using both visibility and display properties.
Returns true if display is not "none"
Convenience method for setVisibilityMode(Element.DISPLAY)
Puts a mask over this element to disable user interaction. Requires core.css.
Removes a previously applied mask.
Returns true if this element is masked
Creates an iframe shim for this element to keep selects and other windowed objects from
Initializes a {@link Ext.dd.DD} drag drop object for this element.
Initializes a {@link Ext.dd.DDProxy} object for this element.
Initializes a {@link Ext.dd.DDTarget} object for this element.
Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
Namespace alloted for extensions to the framework.
A reusable empty function
URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images.
Returns the current HTML document object as an {@link Ext.Element}.
Utility method for validating that a value is numeric, returning the specified default value if it is not.
<p>Utility method for returning a default value if the passed value is empty.</p>
Escapes the passed string for use in a regular expression
Applies event listeners to elements by selectors when the document is ready.
Utility method for getting the width of the browser scrollbar. This can differ depending on
Copies a set of named properties fom the source object to the destination object.
Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
Attempts to destroy and then remove a set of named properties of the passed object.
Creates a copy of the passed Array with falsy values removed.
Creates a copy of the passed Array, filtered to contain only unique values.
Recursively flattens into 1-d Array. Injects Arrays inline.
Returns the minimum value in the Array.
Returns the maximum value in the Array
Calculates the mean of the Array
Calculates the sum of the Array
Partitions the set into two sets: a true set and a false set.
Invokes a method on each item in an Array.
Plucks the value of a property from each item in the Array
<p>Zips N sets together.</p>
This is shorthand reference to {@link Ext.ComponentMgr#get}.
By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,
Returns the type of object that is passed in. If the object passed in is null or undefined it
Create a combined function call sequence of the original function + the passed function.
Escapes the passed string for ' and \
Pads the left side of a string with a specified character.  This is especially useful
Utility function that allows you to easily switch a string between two alternating values.  The passed value
Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
Returns the number of milliseconds between this date and date
Checks whether or not the current number is within a desired range.  If the number is already within the
See <code>{@link #disableFormats}</code>.
The regular expression used to match template variables
Returns an HTML fragment of this template with the specified values applied.
Compiles the template into an internal function, eliminating the RegEx overhead.
Returns the first Element
Returns the last Element
Returns true if this composite contains the passed element
Removes the specified element(s).
Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.
Return an object defining the area of this Element which can be passed to {@link #setBox} to
Move this element relative to its current position.
Quick set left and top adding default units
Returns the region of the given element.
Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.
Gets the x,y coordinates specified by the anchor position on the element.
Anchors an element to another element and realigns it when the window is resized.
Remove any anchor to this element. See {@link #anchorTo}.
Each event type implements a getData() method. The default event types are:
Four types of possible exceptions which can occur:
List compiled by mystix on the extjs.com forums.
List compiled by mystix on the extjs.com forums.
Hebrew Translations
List compiled by mystix on the extjs.com forums.
Greek (Old Version) Translations by Vagelis
List compiled by mystix on the extjs.com forums.
Portuguese/Brazil Translation by Weber Souza
Polish Translations
List compiled by KillerNay on the extjs.com forums.

Finnish Translations
Bulgarian Translation
List compiled by mystix on the extjs.com forums.
Vietnamese translation
Latvian Translations

Lithuanian Translations (UTF-8)
Greek translation
Swedish translation (utf8-encoding)
Korean Translations By nicetip
Slovenian translation by Matjaž (UTF-8 encoding)
Catalonian Translation by halkon_polako 6-12-2007
Pedoman translasi:
Romanian translations for ExtJS 2.1
Czech Translations
Configures the default state provider for your application
Returns the current value for a key
Sets the value for a key
Clears a value from the state
Gets the currently configured state provider
Returns the current value for a key
Clears a value from the state
Sets the value for a key
Decodes a string previously encoded with {@link #encodeValue}.
Encodes a value including type information.  Decode with {@link #decodeValue}.
Cancels any pending timeout and queues a new one
Cancel the last queued timeout
Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.
Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
Sets the element's left position directly using CSS style (instead of {@link #setX}).
Sets the element's top position directly using CSS style (instead of {@link #setY}).
Sets the element's CSS right style.
Sets the element's CSS bottom style.
Sets the position of the element in page coordinates, regardless of how the element is positioned.
Sets the position of the element in page coordinates, regardless of how the element is positioned.
Sets the position of the element in page coordinates, regardless of how the element is positioned.
Gets the left X coordinate
Gets the right X coordinate of the element (element X position + element width)
Gets the top Y coordinate
Gets the bottom Y coordinate of the element (element Y position + element height)
Initializes positioning on this element. If a desired position is not passed, it will make the
Clear positioning back to the default when the document was loaded
Gets an object with all CSS positioning properties. Useful along with setPostioning to get
Set positioning with an object returned by getPositioning().
Translates the passed page coordinates into left/top css values for this element
<p>The Array of DOM elements which this CompositeElement encapsulates. Read-only.</p>
Returns true if this element is scrollable.
Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
Returns the current scroll position of the element.
Visibility mode constant for use with {@link #setVisibilityMode}. Use visibility to hide element
Visibility mode constant for use with {@link #setVisibilityMode}. Use display to hide element
The element's default display mode  (defaults to "")
Sets the element's visibility mode. When setVisible() is called it
Perform custom animation on this element.
Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
Selects child nodes based on the passed CSS selector (the selector should not contain an id).
Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
Gets the parent node for this element, optionally chaining up trying to match a selector
Gets the next sibling, skipping text nodes
Gets the previous sibling, skipping text nodes
Gets the first child, skipping text nodes
Gets the last child, skipping text nodes
me.html = html;
See <code>{@link #re}</code>.
Returns an HTML fragment of this template with the specified <code>values</code> applied.
Sets the HTML used as the template and optionally compiles it.
Compiles the template into an internal function, eliminating the RegEx overhead.
Applies the supplied values to the template and inserts the new node(s) as the first child of el.
Applies the supplied values to the template and inserts the new node(s) before el.
Applies the supplied values to the template and inserts the new node(s) after el.
Applies the supplied <code>values</code> to the template and appends
Applies the supplied values to the template and overwrites the content of el with the new node(s).
Alias for {@link #applyTemplate}
Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
The DOM element
The DOM element ID
Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
The default unit to append to CSS values where a unit isn't provided (defaults to px).
Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)
Tries to focus the element. Any exceptions are caught and ignored.
Tries to blur the element. Any exceptions are caught and ignored.
Returns the value of the "value" attribute
Appends an event handler to this element.  The shorthand version {@link #on} is equivalent.
Removes an event handler from this element.  The shorthand version {@link #un} is equivalent.
Removes all previous added listeners from this element
Recursively removes all previous added listeners from this element and its children
<p>Updates the <a href="http://developer.mozilla.org/en/DOM/element.innerHTML">innerHTML</a> of this Element
Tests various css rules/browsers to determine if this element uses a border box
<p>Removes this element's dom reference.  Note that event and cache removal is handled at {@link Ext#removeNode}</p>
Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
Returns true if this element is an ancestor of the passed element
Returns the value of a namespaced attribute from the element's underlying DOM node.
Returns the value of an attribute from the element's underlying DOM node.
Update the innerHTML of this element
Appends an event handler (shorthand for {@link #addListener}).
Removes an event handler from this element (see {@link #removeListener} for additional notes).
true to automatically adjust width and height settings for box-model issues (default to true)
Loads a given set of .js files. Calls the callback function when all files have been loaded
Loads a particular file from the fileList by index. This is used when preserving order
Callback function which is called after each file has been loaded. This calls the callback
Compiles a selector/xpath query into a reusable function. The returned function
Selects a group of elements.
Selects a single element.
Selects the value of a node, optionally replacing null with the defaultValue.
Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified.
Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)
Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)
Collection of matching regular expressions and code snippets.
Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.
<p>Object hash of "pseudo class" filter functions which are used when filtering selections. Each function is passed
Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Ext.DomQuery#select}
Appends the passed element(s) to this element
Appends this element to the passed element
Inserts this element before the passed element in the DOM
Inserts this element after the passed element in the DOM
Inserts (or creates) an element (or DomHelper config) as the first child of this element
Replaces the passed element with this element
Replaces this element with the passed element
Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
Creates and wraps this element with another element
Inserts an html fragment into this element
The version of the framework
Copies all the properties of config to obj.
URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent
True if the browser is in strict (standards-compliant) mode, as opposed to quirks mode
True if the page is running over SSL
True when the document is fully initialized and ready for action
True if the {@link Ext.Fx} Class is available
True to automatically uncache orphaned Ext.Elements periodically (defaults to true)
True to automatically purge event listeners during garbageCollection (defaults to false).
EXPERIMENTAL - True to cascade listener removal to child elements when an element is removed.
Indicates whether to use native browser parsing for JSON methods.
Copies all the properties of config to obj if they don't already exist.
Generates unique ids. If the element already has an id, it is unchanged
<p>Extends one class to create a subclass and optionally overrides members with the passed literal. This method
Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
Creates namespaces to be used for scoping variables and classes so that they are not global.
Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return "foo=1&bar=2".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.
Takes an encoded URL and and converts it to an object. Example: <pre><code>
Appends content to the query string of a URL, handling logic for whether to place
Converts any iterable (numeric indices and a length property) into a true array
Iterates an array calling the supplied function.
Iterates either the elements in an array, or each of the properties in an object.
Return the dom node for the passed String (id), dom node, or Ext.Element.
Returns the current document body as an {@link Ext.Element}.
Removes a DOM node from the document.
<p>Removes this element from the document, removes all DOM event listeners, and deletes the cache reference.
<p>Returns true if the passed value is empty.</p>
Returns true if the passed value is a JavaScript array, otherwise false.
Returns true if the passed object is a JavaScript date object, otherwise false.
Returns true if the passed value is a JavaScript Object, otherwise false.
Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
Returns true if the passed value is a JavaScript Function, otherwise false.
Returns true if the passed value is a number. Returns false for non-finite numbers.
Returns true if the passed value is a string.
Returns true if the passed value is a boolean.
Returns true if the passed value is an HTMLElement
Returns true if the passed value is not undefined.
True if the detected browser is Opera.
True if the detected browser uses WebKit.
True if the detected browser is Chrome.
True if the detected browser is Safari.
True if the detected browser is Safari 3.x.
True if the detected browser is Safari 4.x.
True if the detected browser is Safari 2.x.
True if the detected browser is Internet Explorer.
True if the detected browser is Internet Explorer 6.x.
True if the detected browser is Internet Explorer 7.x.
True if the detected browser is Internet Explorer 8.x.
True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox).
True if the detected browser uses a pre-Gecko 1.9 layout engine (e.g. Firefox 2.x).
True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x).
True if the detected browser is Internet Explorer running in non-strict mode.
True if the detected platform is Linux.
True if the detected platform is Windows.
True if the detected platform is Mac OS.
True if the detected platform is Adobe Air.
Creates namespaces to be used for scoping variables and classes so that they are not global.
Creates an interceptor function. The passed function is called before the original one. If it returns false,
Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
Creates a delegate (callback) that sets the scope to obj.
Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
Checks whether or not the specified object exists in the array.
Removes the specified object from the array.  If the object is not found nothing happens.
<p>Sends an HTTP request to a remote server.</p>
Determine whether this object has a request outstanding.
Aborts any outstanding request.
MemoryProxy implementation of DataProxy#doRequest
DirectProxy implementation of {@link Ext.data.DataProxy#doRequest}
Registers one or more Stores with the StoreMgr. You do not normally need to register stores
Unregisters one or more Stores with the StoreMgr
Gets a registered Store by id
Generate a constructor for a specific Record layout.
Generates a sequential id. This method is typically called when a record is {@link #create}d
<p><b>This property is stored in the Record definition's <u>prototype</u></b></p>
An object hash representing the data for this Record. Every field name in the Record definition
The unique ID of the Record {@link #Record as specified at construction time}.
<p><b>Only present if this Record was created by an {@link Ext.data.XmlReader XmlReader}</b>.</p>
<p><b>Only present if this Record was created by an {@link Ext.data.ArrayReader ArrayReader} or a {@link Ext.data.JsonReader JsonReader}</b>.</p>
Readonly flag - true if this Record has been modified.
This object contains a key and value storing the original values of all modified
<tt>true</tt> when the record does not yet exist in a server-side database (see
Default sort that does nothing
The regular expression used to strip tags
Strips all HTML tags to sort on text only
Strips all HTML tags to sort on text only - Case insensitive
Case insensitive string
Date sorting
Float sorting
Integer sorting
Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}
The root node for this tree
This DataReader's configured metadata as passed to the constructor.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method created in extension's buildExtractors impl.
Abstract method, overridden in DataReader extensions such as {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}
Abstract method overridden in DataReader extensions such as {@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}
Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.
Used for updating a non-phantom or "real" record's data with fresh data from server after remote-save.
returns extracted, type-cast rows of data.  Iterates to call #extractValues for each row
Returns true if the supplied data-hash <b>looks</b> and quacks like data.  Checks to see if it has a key
This JsonReader's metadata as passed to the constructor, or as passed in
This method is only used by a DataProxy which has retrieved data from a remote server.
Decode a JSON response from server.
Create a data block containing Ext.data.Records from a JSON object.
After any data loads, the raw JSON data is available for further custom processing.  If no data is
HttpProxy implementation of DataProxy#doRequest
Callback for read actions
Callback for write actions
The Connection object (Or options parameter to {@link Ext.Ajax#request}) which this HttpProxy
Return the {@link Ext.data.Connection} object being used by this Proxy.
Used for overriding the url used for a single request.  Designed to be called during a beforeaction event.  Calling setUrl
HttpProxy implementation of DataProxy#doRequest
Returns a callback function for a request.  Note a special case is made for the
Callback for read action
Callback for write actions
Final action of a write event.  Apply the written data-object to params.
Implements abstract Ext.data.DataWriter#createRecord
Implements abstract Ext.data.DataWriter#updateRecord
Implements abstract Ext.data.DataWriter#destroyRecord
Clears any existing grouping and refreshes the data using the default sort.
Groups the data by the specified field.
<p>Redefines the Proxy's API or a single action of an API. Can be called with two method signatures.</p>
Returns true if the specified action is defined as a unique action in the api-config.
All proxy actions are executed through this method.  Automatically fires the "before" + action event
<b>Deprecated</b> load method using old method signature. See {@doRequest} for preferred method.
buildUrl
Destroys the proxy by purging any event listeners and cancelling any active requests.
This method is only used by a DataProxy which has retrieved data from a remote server.
Create a data block containing Ext.data.Records from an XML document.
After any data loads/reads, the raw XML Document is available for further custom processing.
Decode an XML response from server.
build response-data extractor functions.
Creates a function to return some particular key of data from a response.
extracts values and type-casts a row of data from server, extracted by #extractData
Compiles a Store recordset into a data-format defined by an extension such as {@link Ext.data.JsonWriter} or {@link Ext.data.XmlWriter} in preparation for a {@link Ext.data.Api#actions server-write action}.  The first two params are similar similar in nature to {@link Ext#apply},
abstract method meant to be overridden by all DataWriter extensions.  It's the extension's job to apply the "data" to the "params".
Converts a Record to a hash, taking into account the state of the Ext.data.Record along with configuration properties
Converts a {@link Ext.data.DataWriter#toHash Hashed} {@link Ext.data.Record} to fields-array array suitable
Create a data block containing Ext.data.Records from an Array.
XmlWriter implementation of the final stage of a write action.
createRecord
updateRecord
destroyRecord
Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
Disables the mask to prevent it from being displayed
Enables the mask so that it can be displayed
The {@link Ext.DatePicker} instance for this DateMenu
Set this property to <tt>true</tt> to disable the header click handler disabling sort
<p>Function which can be overridden which returns the data object passed to this
When a Tooltip is configured with the <code>{@link #delegate}</code>
Initialize the global QuickTips instance and prepare any quick tips.
Enable quick tips globally.
Disable quick tips globally.
Returns true if quick tips are enabled, else false.
Gets the global QuickTips instance.
Configures a new quick tip instance and assigns it to a target element.  See
Removes any registered quick tip from the target element and destroys it.
Alias of {@link #register}.
Used to create the text that appears in the Tip's body. By default this just returns
The proxy Element that is resized in place of the real Element during the resize operation.
Perform a manual resize and fires the 'resize' event.
Read only. The CSS style specification string added to field labels in this layout if not
A reference to the {@link Ext.Component} that is active.  For example, <pre><code>
Filter the data by a specific attribute.
Filter by a function. The passed function will be called with each
Clears the current filter. Note: with the "remove" option
The loader used by this node (defaults to using the tree's defined loader)
Returns true if this node is currently loading
Returns true if this node has been loaded
Trigger a reload for this node
Select a node.
Deselect a node.
Clear all selections
Get the selected node
Returns true if the node is selected
Selects the node above the selected node in the tree, intelligently walking the nodes
Selects the node above the selected node in the tree, intelligently walking the nodes
Select a node.
Deselect a node.
Clear all selections
Returns true if the node is selected
Returns an array of the selected nodes
The root node of this tree.
Load an {@link Ext.tree.TreeNode} from the URL specified in the constructor.
Read-only. The text for this node. To change it use <code>{@link #setText}</code>.
True if this node is disabled.
True if this node is hidden.
Read-only. The UI for this node
Returns true if this node is expanded
Returns the UI object for this node.
The TreePanel for this drop zone
Arbitrary data that can be associated with this tree and will be included in the event object that gets
The TreePanel for this drag zone
This Component's initial configuration specification. Read-only.
Sets the url for installing flash if it doesn't exist. This should be set to a local resource.
Sets a single style value on the Chart instance.
Resets all styles on the Chart instance.
Sets the styles on all series in the Chart.
Changes the data store bound to this chart and refreshes it.
<p><b>Deprecated</b>. <code>paramNames</code> should be set in the <b>data store</b>
The number of records to display per page.  See also <tt>{@link #cursor}</tt>.
Indicator for the record position.  This property might be used to get the active page
Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom
<p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations
<p>The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.</p>
<p>The provided implementation of the onInitDrag method. Sets the <tt>innerHTML</tt> of the drag proxy which provides the "picture"
An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight
<p>An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.</p>
The GridPanel for which this SelectionModel is handling selection. Read-only.
init : function(grid){
Locks the selections.
Unlocks the selections.
Returns true if the selections are locked.
An Array of {@link Ext.grid.Column Column definition} objects representing the configuration
Returns the id of the column at the specified index.
<p>Reconfigures this column model according to the passed Array of column definition objects.
Returns the column for a specified id.
Returns the index for a specified column id.
Moves a column from one position to another.
Returns the number of columns.
Returns the column configs that return true by the passed function that is called
Returns true if the specified column is sortable.
Returns true if the specified column menu is disabled.
Returns the rendering (formatting) function defined for the column.
Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some
Returns the width for the specified column.
Sets the width for a column.
Returns the total width of all columns.
Returns the header for the specified column.
Sets the header for a column.
Returns the tooltip for the specified column.
Sets the tooltip for a column.
Returns the dataIndex for the specified column.
Sets the dataIndex for a column.
Finds the index of the first matching column for the given dataIndex.
Returns true if the cell is editable.
Returns the editor defined for the cell/column.
Sets if a column is editable.
Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#hidden hidden}</code>,
Returns <tt>true</tt> if the column is <code>{@link Ext.grid.Column#fixed fixed}</code>,
Returns true if the column can be resized
Sets if a column is hidden.
Sets the editor for a column and destroys the prior editor.
Destroys this column model by purging any event listeners, and removing any editors.
initEvents : function(){
Optional. A function which returns displayable data when passed the following parameters:
this.el = Ext.get(dragElement, true);
this.resizingEl = Ext.get(resizingElement, true);
The increment, in pixels by which to move this SplitBar. When <i>undefined</i>, the SplitBar moves smoothly.
The minimum size of the resizing element. (Defaults to 0)
The maximum size of the resizing element. (Defaults to 2000)
Whether to animate the transition to the new size
Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes.
this.shim = null;
this.proxy = Ext.SplitBar.createProxy(this.orientation);
this.dd = new Ext.dd.DDProxy(this.el.dom.id, "XSplitBars", {dragElId : this.proxy.id});
this.dd.b4StartDrag = this.onStartProxyDrag.createDelegate(this);
this.dd.endDrag = this.onEndProxyDrag.createDelegate(this);
this.dragSpecs = {};
this.placement = placement || (this.el.getX() > this.resizingEl.getX() ? Ext.SplitBar.LEFT : Ext.SplitBar.RIGHT);
this.placement = placement || (this.el.getY() > this.resizingEl.getY() ? Ext.SplitBar.TOP : Ext.SplitBar.BOTTOM);
Get the adapter this SplitBar uses
Set the adapter this SplitBar uses
Gets the minimum size for the resizing element
Sets the minimum size for the resizing element
Gets the maximum size for the resizing element
Sets the maximum size for the resizing element
Sets the initialize size for the resizing element
Destroy this splitbar.
Called before drag operations to get the current size of the resizing element.
Called after drag operations to set the size of the resizing element.
Orientation constant - Create a vertical SplitBar
Orientation constant - Create a horizontal SplitBar
Placement constant - The resizing element is to the left of the splitter element
Placement constant - The resizing element is to the right of the splitter element
Placement constant - The resizing element is positioned above the splitter element
Placement constant - The resizing element is positioned under splitter element
<p>The label Element associated with this Field. <b>Only available after this Field has been rendered by a
Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
If this radio is part of a group, it will return the selected value
The function used to validate email addresses.  Note that this is a very basic validation -- complete
The error text to display when the email validation function returns false.  Defaults to:
The keystroke filter mask to be applied on email input.  See the {@link #email} method for
The function used to validate URLs
The error text to display when the url validation function returns false.  Defaults to:
The function used to validate alpha values
The error text to display when the alpha validation function returns false.  Defaults to:
The keystroke filter mask to be applied on alpha input.  Defaults to:
The function used to validate alphanumeric values
The error text to display when the alphanumeric validation function returns false.  Defaults to:
The keystroke filter mask to be applied on alphanumeric input.  Defaults to:
A {@link Ext.util.MixedCollection MixedCollection} containing all the Ext.form.Fields in this form.
Called if combineErrors is true and a subfield's markInvalid method is called.
Called if combineErrors is true and a subfield's clearInvalid method is called.
Performs validation checks on each subfield and returns false if any of them fail validation.
Takes an object containing error messages for contained fields, returning a combined error
Sorts the internal fieldErrors MixedCollection by the order in which the fields are defined.
Resets each field in the composite to their previous value
Calls clearInvalid on all child fields. This is a convenience function and should not often need to be called
Builds a label string from an array of subfield labels.
Checks each field in the composite and returns true if any is dirty
Failure type returned when client side validation of the Form fails
<p>Failure type returned when server side processing fails and the {@link #result}'s
Failure type returned when a communication error happens when attempting
Failure type returned when the response's <tt style="font-weight:bold">success</tt>
The type of action this Action instance performs.
The type of failure detected will be one of these: {@link #CLIENT_INVALID},
The XMLHttpRequest object used to perform the action.
The decoded response object containing a boolean <tt style="font-weight:bold">success</tt> property and
Read-only. True if this button is hidden
Read-only. True if this button is disabled
Read-only. True if this button is pressed (only if enableToggle = true)
Registers a component.
Unregisters a component.
Returns a component by {@link Ext.Component#id id}.
Registers a function that will be called when a Component with the specified id is added to ComponentMgr. This will happen on instantiation.
The MixedCollection used internally for the component cache. An example usage may be subscribing to
The xtypes that have been registered with the component manager.
The ptypes that have been registered with the component manager.
Checks if a Component type is registered.
Checks if a Plugin type is registered.
<p>Registers a new Component constructor, keyed by a new
Creates a new Component from the specified config object using the
<p>Registers a new Plugin constructor, keyed by a new
Creates a new Plugin from the specified config object using the
Shorthand for {@link Ext.ComponentMgr#registerType}
Shorthand for {@link Ext.ComponentMgr#registerPlugin}
Shorthand for {@link Ext.ComponentMgr#create}
The Panel's header {@link Ext.Element Element}. Read-only.
The Panel's body {@link Ext.Element Element} which may be used to contain HTML content.
The Panel's bwrap {@link Ext.Element Element} used to contain other Panel elements
True if this panel is collapsed. Read-only.
The Panel's footer {@link Ext.Element Element}. Read-only.
<p>A {@link Ext.Toolbar Toolbar} object, a Toolbar config, or an array of
The event to listen to for resizing in layouts. Defaults to <tt>'bodyresize'</tt>.
elements : 'header,body',
frame : true,
floating : true,
If true the container will automatically destroy any contained component that is removed from it, else
If true the container will force a layout initially even if hidden or collapsed. This option
True to hide the borders of each contained component, false to defer to the component's existing
<p>The default {@link Ext.Component xtype} of child Components to create in this Container when
The event to listen to for resizing in layouts. Defaults to <code>'resize'</code>.
Renders the thumb into a slider
Enables the thumb if it is currently disabled
Disables the thumb if it is currently enabled
Sets up an Ext.dd.DragTracker for this thumb
True while the thumb is in a drag operation
Template method which should be overridden by each DragTracker instance. Called when the user first clicks and
Template method which should be overridden by each DragTracker instance. Called when a drag operation starts
Template method which should be overridden by each DragTracker instance. Called whenever a drag has been detected.
Template method which should be overridden by each DragTracker instance. Called when a drag operation has been completed
Returns the drag target
Set to false to enable a DragDrop object to fire drag events while dragging
The id of the element associated with this object.  This is what we
Configuration attributes passed into the constructor
The id of the element that will be dragged.  By default this is same
The ID of the element that initiates the drag operation.  By default
An object who's property names identify HTML tags to be considered invalid as drag handles.
An object who's property names identify the IDs of elements to be considered invalid as drag handles.
An Array of CSS class names for elements to be considered in valid as drag handles.
The linked element's absolute X position at the time the drag was
The linked element's absolute X position at the time the drag was
The group defines a logical collection of DragDrop objects that are
Individual drag/drop instances can be locked.  This will prevent
Lock this instance
When set to true, other DD objects in cooperating DDGroups do not receive
Unlock this instace
By default, all instances can be a drop target.  This can be disabled by
The padding configured for this drag and drop object for calculating
Cached reference to the linked element
Internal typeof flag
Set to true when horizontal contraints are applied
Set to true when vertical contraints are applied
The left constraint
The right constraint
The up constraint
The down constraint
Maintain offsets when we resetconstraints.  Set to true when you want
Array of pixel locations the element will snap to if we specified a
Array of pixel locations the element will snap to if we specified a
By default the drag and drop instance will only respond to the primary
The available property is false until the linked dom element is accessible.
By default, drags can only be initiated if the mousedown occurs in the
Code that executes immediately before the startDrag event
Abstract method called after a drag/drop object is clicked
Code that executes immediately before the onDrag event
Abstract method called during the onMouseMove event while dragging an
Abstract method called when this element fist begins hovering over
Code that executes immediately before the onDragOver event
Abstract method called when this element is hovering over another
Code that executes immediately before the onDragOut event
Abstract method called when we are no longer hovering over an element
Code that executes immediately before the onDragDrop event
Abstract method called when this item is dropped on another DragDrop
Abstract method called when this item is dropped on an area with no
Code that executes immediately before the endDrag event
Fired when we are done dragging the object
Code executed immediately before the onMouseDown event
Event handler that fires when a drag/drop obj gets a mousedown
Event handler that fires when a drag/drop obj gets a mouseup
Override the onAvailable method to do what is needed after the initial
Provides default constraint padding to "constrainTo" elements (defaults to {left: 0, right:0, top:0, bottom:0}).
Initializes the drag drop object's constraints to restrict movement to a certain element.
Returns a reference to the linked element
Returns a reference to the actual element to drag.  By default this is
Sets up the DragDrop object.  Must be called in the constructor of any
Initializes Targeting functionality only... the object does not
Applies the configuration parameters that were passed into the constructor.
Executed when the linked element is available
Configures the padding for the target zone in px.  Effectively expands
Stores the initial placement of the linked element.
Sets the start position of the element.  This is set when the obj
Add this instance to a group of related drag/drop objects.  All
Remove's this instance from the supplied interaction group
Allows you to specify that an element other than the linked element
Allows you to specify a child of the linked element that should be
Allows you to set an element outside of the linked element as a drag
Remove all drag and drop hooks for this element
Returns true if this instance is locked, or the drag drop mgr is locked
Fired when this object is clicked
Allows you to specify a tag name that should not start a drag operation
Lets you to specify an element id for a child of a drag handle
Lets you specify a css class of elements that will not initiate a drag
Unsets an excluded tag name set by addInvalidHandleType
Unsets an invalid handle id
Unsets an invalid css class
Checks the tag exclusion list to see if this click should be ignored
Create the array of horizontal tick marks if an interval was specified
Create the array of vertical tick marks if an interval was specified in
By default, the element can be dragged any place on the screen.  Use
Clears any constraints applied to this instance.  Also clears ticks
Clears any tick interval defined for this instance
By default, the element can be dragged any place on the screen.  Set
resetConstraints must be called if you manually reposition a dd element.
Normally the drag element is moved pixel by pixel, but we can specify
toString method
Two dimensional Array of registered DragDrop objects.  The first
Array of element ids defined as drag handles.  Used to determine
the DragDrop object that is currently being dragged
the DragDrop object(s) that are being hovered over
the X distance between the cursor and the object being dragged
the Y distance between the cursor and the object being dragged
Flag to determine if we should prevent the default behavior of the
Flag to determine if we should stop the propagation of the events
Internal flag that is set to true when drag and drop has been
All drag and drop can be disabled.
Called the first time an element is registered.
In point mode, drag and drop interaction is defined by the
In intersect mode, drag and drop interaction is defined by the
The current drag and drop mode.  Default: POINT
Runs method on all drag and drop objects
Drag and drop initialization.  Sets up the global event handlers
Reset constraints on all drag and drop objs
Lock all drag and drop functionality
Unlock all drag and drop functionality
Is drag and drop locked?
Location cache that is set for all drag drop objects when a drag is
Set useCache to false if you want to force object the lookup of each
The number of pixels that the mouse needs to move after the
The number of milliseconds after the mousedown event to initiate the
Flag that indicates that either the drag pixel threshold or the
Timeout used for the click time threshold
The X position of the mousedown event stored for later use when a
The Y position of the mousedown event stored for later use when a
Each DragDrop instance must be registered with the DragDropMgr.
Removes the supplied dd instance from the supplied group. Executed
Unregisters a drag and drop item.  This is executed in
Each DragDrop handle element must be registered.  This is done
Utility function to determine if a given element has been
Returns the drag and drop instances that are in all groups the
Returns true if the specified dd target is a legal target for
My goal is to be able to transparently determine if an object is
Utility function to determine if a given element has been
Returns the DragDrop instance for a given id
Fired after a registered DragDrop object gets the mousedown event.
Fired when either the drag pixel threshol or the mousedown hold
Internal function to handle the mouseup event.  Will be invoked
Utility to stop event propagation and event default, if these
Internal function to clean up event handlers after the drag
Internal function to handle the mousemove event.  Will be invoked
Iterates over all of the DragDrop elements to find ones we are
Helper function for getting the best match from the list of drag
Refreshes the cache of the top-left and bottom-right points of the
This checks to make sure an element exists and is in the DOM.  The
Returns a Region object containing the drag and drop element's position
Checks the cursor location to see if it over the target
unload event handler
Cleans up the drag and drop events and objects.
A cache of DOM elements
Get the wrapper for the DOM element specified
Returns the actual DOM element
Returns the style property for the DOM element (i.e.,
Inner class for cached elements
The element
The element id
A reference to the style property
Returns the X position of an html element
Returns the Y position of an html element
Swap two nodes.  In IE, we use the native method, for others we
Returns the current scroll position
Returns the specified element style property
Gets the scrollTop
Gets the scrollLeft
Sets the x/y position of an element to the location of the
Numeric array sort function
Internal counter
Trying to make the load order less important.  Without this we get
Recursively searches the immediate parent and all child nodes for
When set to true, the utility automatically tries to scroll the browser
Sets the pointer offset to the distance between the linked element's top
Sets the pointer offset.  You can call this directly to force the
Sets the drag element to the location of the mousedown or click event,
Sets the element to the location of the mousedown or click event,
Saves the most recent position so that we can reset the constraints and
Auto-scroll the window if the dragged object has been moved beyond the
Finds the location the element should be placed if we want to move
Sets up config options specific to this class. Overrides
Event that fires prior to the onMouseDown event.  Overrides
Event that fires prior to the onDrag event.  Overrides
The default drag frame div id
By default we resize the drag frame to be the same size as the element
By default the frame is positioned exactly where the drag element is, so
Creates the proxy element if it does not yet exist
Initialization for the drag frame element.  Must be called in the
Resizes the drag frame to the dimensions of the clicked object, positions
The proxy is automatically resized to the dimensions of the linked
Registers new overflow element(s) to auto scroll
Unregisters overflow element(s) so they are no longer scrolled
The number of pixels from the top or bottom edge of a container the pointer needs to be to
The number of pixels from the right or left edge of a container the pointer needs to be to
The number of pixels to scroll in each scroll increment (defaults to 50)
The frequency of scrolls in milliseconds (defaults to 500)
True to animate the scroll (defaults to true)
The animation duration in seconds - 
Manually trigger a cache refresh.
Resgister a drag drop element
Unregister a drag drop element
Returns the handle registered for a DOM Node by id
Returns the handle that is registered for the DOM node that is the target of the event
Returns a custom data object that is registered for a DOM node by id
Returns a custom data object that is registered for the DOM node that is the target of the event
This property contains the data representing the dragged object. This data is set up by the implementation
Called when a mousedown occurs in this container. Looks in {@link Ext.dd.Registry}
Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
Called after a repair of an invalid drop. By default, highlights this.dragData.ddel 
Called before a repair of an invalid drop to get the XY to animate to. By default returns
Returns a custom data object associated with the DOM node that is the target of the event.  By default
Called when the DropZone determines that a {@link Ext.dd.DragSource} has entered a drop node
Called while the DropZone determines that a {@link Ext.dd.DragSource} is over a drop node
Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dragged out of
Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped onto
Called while the DropZone determines that a {@link Ext.dd.DragSource} is being dragged over it,
Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped on it,
The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source is now over
The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the drop zone.
The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source has been dragged
The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the dragged item has
Updates the proxy's visual element to indicate the status of whether or not drop is allowed
Resets the status indicator to the default dropNotAllowed value
Updates the contents of the ghost element
Returns the underlying proxy {@link Ext.Layer}
Returns the ghost element
Hides the proxy
Stops the repair animation if it's currently running
Displays this proxy
Force the Layer to sync its shadow and shim positions to the element
Causes the proxy to return to its position of origin via an animation.  Should be called after an
Returns the data object associated with this drag source
